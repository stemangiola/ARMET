// Generated by rstantools.  Do not edit by hand.

/*
    ARMET is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    ARMET is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with ARMET.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.19.1

#include <stan/model/model_header.hpp>

namespace model_ARMET_tc_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_ARMET_tc");
    reader.add_event(386, 384, "end", "model_ARMET_tc");
    return reader;
}

template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, Eigen::Dynamic>
vector_array_to_matrix(const std::vector<Eigen::Matrix<T0__, Eigen::Dynamic, 1> >& x, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 4;
        validate_non_negative_index("y", "size(x)", size(x));
        validate_non_negative_index("y", "rows(get_base1(x, 1, \"x\", 1))", rows(get_base1(x, 1, "x", 1)));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> y(size(x), rows(get_base1(x, 1, "x", 1)));
        stan::math::initialize(y, DUMMY_VAR__);
        stan::math::fill(y, DUMMY_VAR__);


        current_statement_begin__ = 5;
        for (int m = 1; m <= size(x); ++m) {
            current_statement_begin__ = 6;
            stan::model::assign(y, 
                        stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list()), 
                        transpose(get_base1(x, m, "x", 1)), 
                        "assigning variable y");
        }
        current_statement_begin__ = 7;
        return stan::math::promote_scalar<fun_return_scalar_t__>(y);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct vector_array_to_matrix_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const std::vector<Eigen::Matrix<T0__, Eigen::Dynamic, 1> >& x, std::ostream* pstream__) const {
        return vector_array_to_matrix(x, pstream__);
    }
};

template <typename T0__, typename T1__>
std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, 1> >
multiply_by_column(const std::vector<Eigen::Matrix<T0__, Eigen::Dynamic, 1> >& v,
                       const std::vector<T1__>& r, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 11;
        int n_rows(0);
        (void) n_rows;  // dummy to suppress unused var warning
        stan::math::fill(n_rows, std::numeric_limits<int>::min());
        stan::math::assign(n_rows,num_elements(stan::model::rvalue(v, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "v")));

        current_statement_begin__ = 12;
        int n_cols(0);
        (void) n_cols;  // dummy to suppress unused var warning
        stan::math::fill(n_cols, std::numeric_limits<int>::min());
        stan::math::assign(n_cols,num_elements(get_base1(v, 1, "v", 1)));

        current_statement_begin__ = 14;
        validate_non_negative_index("v_mult", "n_cols", n_cols);
        validate_non_negative_index("v_mult", "n_rows", n_rows);
        std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>  > v_mult(n_rows, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>(n_cols));
        stan::math::initialize(v_mult, DUMMY_VAR__);
        stan::math::fill(v_mult, DUMMY_VAR__);


        current_statement_begin__ = 15;
        for (int i = 1; i <= n_cols; ++i) {
            current_statement_begin__ = 15;
            stan::model::assign(v_mult, 
                        stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                        to_array_1d(elt_multiply(to_row_vector(stan::model::rvalue(v, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "v")), to_row_vector(r))), 
                        "assigning variable v_mult");
        }
        current_statement_begin__ = 17;
        return stan::math::promote_scalar<fun_return_scalar_t__>(v_mult);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct multiply_by_column_functor__ {
    template <typename T0__, typename T1__>
        std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, 1> >
    operator()(const std::vector<Eigen::Matrix<T0__, Eigen::Dynamic, 1> >& v,
                       const std::vector<T1__>& r, std::ostream* pstream__) const {
        return multiply_by_column(v, r, pstream__);
    }
};

template <typename T0__, typename T1__>
std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, 1> >
append_vector_array(const std::vector<Eigen::Matrix<T0__, Eigen::Dynamic, 1> >& v1,
                        const std::vector<Eigen::Matrix<T1__, Eigen::Dynamic, 1> >& v2, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 21;
        validate_non_negative_index("v3", "(num_elements(get_base1(v1, 1, \"v1\", 1)) + num_elements(get_base1(v2, 1, \"v2\", 1)))", (num_elements(get_base1(v1, 1, "v1", 1)) + num_elements(get_base1(v2, 1, "v2", 1))));
        validate_non_negative_index("v3", "num_elements(stan::model::rvalue(v1, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), \"v1\"))", num_elements(stan::model::rvalue(v1, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "v1")));
        std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>  > v3(num_elements(stan::model::rvalue(v1, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "v1")), Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>((num_elements(get_base1(v1, 1, "v1", 1)) + num_elements(get_base1(v2, 1, "v2", 1)))));
        stan::math::initialize(v3, DUMMY_VAR__);
        stan::math::fill(v3, DUMMY_VAR__);


        current_statement_begin__ = 23;
        stan::model::assign(v3, 
                    stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_min_max(1, num_elements(get_base1(v1, 1, "v1", 1))), stan::model::nil_index_list())), 
                    v1, 
                    "assigning variable v3");
        current_statement_begin__ = 24;
        stan::model::assign(v3, 
                    stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_min_max((num_elements(get_base1(v1, 1, "v1", 1)) + 1), num_elements(get_base1(v3, 1, "v3", 1))), stan::model::nil_index_list())), 
                    v2, 
                    "assigning variable v3");
        current_statement_begin__ = 26;
        return stan::math::promote_scalar<fun_return_scalar_t__>(v3);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct append_vector_array_functor__ {
    template <typename T0__, typename T1__>
        std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, 1> >
    operator()(const std::vector<Eigen::Matrix<T0__, Eigen::Dynamic, 1> >& v1,
                        const std::vector<Eigen::Matrix<T1__, Eigen::Dynamic, 1> >& v2, std::ostream* pstream__) const {
        return append_vector_array(v1, v2, pstream__);
    }
};

template <typename T0__, typename T1__>
int
get_buffer_size(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& v,
                    const T1__& threshold, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef int fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 32;
        local_scalar_t__ i(DUMMY_VAR__);
        (void) i;  // dummy to suppress unused var warning
        stan::math::initialize(i, DUMMY_VAR__);
        stan::math::fill(i, DUMMY_VAR__);
        stan::math::assign(i,threshold);

        current_statement_begin__ = 33;
        int n(0);
        (void) n;  // dummy to suppress unused var warning
        stan::math::fill(n, std::numeric_limits<int>::min());
        stan::math::assign(n,0);

        current_statement_begin__ = 34;
        int s(0);
        (void) s;  // dummy to suppress unused var warning
        stan::math::fill(s, std::numeric_limits<int>::min());
        stan::math::assign(s,rows(v));


        current_statement_begin__ = 36;
        while (as_bool(logical_eq(i, threshold))) {

            current_statement_begin__ = 37;
            stan::math::assign(i, get_base1(v, (s - n), "v", 1));
            current_statement_begin__ = 38;
            if (as_bool(logical_eq(i, threshold))) {
                current_statement_begin__ = 38;
                stan::math::assign(n, (n + 1));
            }
        }
        current_statement_begin__ = 41;
        return stan::math::promote_scalar<fun_return_scalar_t__>(n);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct get_buffer_size_functor__ {
    template <typename T0__, typename T1__>
        int
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& v,
                    const T1__& threshold, std::ostream* pstream__) const {
        return get_buffer_size(v, threshold, pstream__);
    }
};

std::vector<int>
get_elements_per_shard(const int& lenth_v,
                           const int& shards, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef int fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 47;
        int tentative_size(0);
        (void) tentative_size;  // dummy to suppress unused var warning
        stan::math::fill(tentative_size, std::numeric_limits<int>::min());
        stan::math::assign(tentative_size,divide(lenth_v, shards));

        current_statement_begin__ = 48;
        int tentative_remaining(0);
        (void) tentative_remaining;  // dummy to suppress unused var warning
        stan::math::fill(tentative_remaining, std::numeric_limits<int>::min());
        stan::math::assign(tentative_remaining,(lenth_v - (tentative_size * shards)));

        current_statement_begin__ = 49;
        int elements_per_shard(0);
        (void) elements_per_shard;  // dummy to suppress unused var warning
        stan::math::fill(elements_per_shard, std::numeric_limits<int>::min());
        stan::math::assign(elements_per_shard,(logical_gt(tentative_remaining, 0) ? (tentative_size + 1) : tentative_size ));

        current_statement_begin__ = 50;
        int remaining(0);
        (void) remaining;  // dummy to suppress unused var warning
        stan::math::fill(remaining, std::numeric_limits<int>::min());
        stan::math::assign(remaining,((elements_per_shard * shards) - lenth_v));

        current_statement_begin__ = 52;
        validate_non_negative_index("length_obj", "shards", shards);
        std::vector<int  > length_obj(shards, int(0));
        stan::math::fill(length_obj, std::numeric_limits<int>::min());


        current_statement_begin__ = 54;
        for (int s = 1; s <= shards; ++s) {

            current_statement_begin__ = 55;
            stan::model::assign(length_obj, 
                        stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list()), 
                        (logical_neq(s, shards) ? elements_per_shard : (elements_per_shard - remaining) ), 
                        "assigning variable length_obj");
        }
        current_statement_begin__ = 61;
        return stan::math::promote_scalar<fun_return_scalar_t__>(length_obj);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct get_elements_per_shard_functor__ {
            std::vector<int>
    operator()(const int& lenth_v,
                           const int& shards, std::ostream* pstream__) const {
        return get_elements_per_shard(lenth_v, shards, pstream__);
    }
};

std::vector<std::vector<int> >
get_int_MPI(const std::vector<int>& v,
                const int& shards, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef int fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 67;
        validate_non_negative_index("elements_per_shard", "shards", shards);
        std::vector<int  > elements_per_shard(shards, int(0));
        stan::math::fill(elements_per_shard, std::numeric_limits<int>::min());
        stan::math::assign(elements_per_shard,get_elements_per_shard(size(v), shards, pstream__));

        current_statement_begin__ = 68;
        int size_MPI_obj(0);
        (void) size_MPI_obj;  // dummy to suppress unused var warning
        stan::math::fill(size_MPI_obj, std::numeric_limits<int>::min());
        stan::math::assign(size_MPI_obj,get_base1(elements_per_shard, 1, "elements_per_shard", 1));

        current_statement_begin__ = 69;
        validate_non_negative_index("v_MPI", "shards", shards);
        validate_non_negative_index("v_MPI", "size_MPI_obj", size_MPI_obj);
        std::vector<std::vector<int  >  > v_MPI(shards, std::vector<int>(size_MPI_obj, int(0)));
        stan::math::fill(v_MPI, std::numeric_limits<int>::min());
        stan::math::assign(v_MPI,rep_array(-(1), shards, size_MPI_obj));

        current_statement_begin__ = 71;
        int i(0);
        (void) i;  // dummy to suppress unused var warning
        stan::math::fill(i, std::numeric_limits<int>::min());
        stan::math::assign(i,0);


        current_statement_begin__ = 73;
        for (int s = 1; s <= shards; ++s) {

            current_statement_begin__ = 74;
            stan::model::assign(v_MPI, 
                        stan::model::cons_list(stan::model::index_uni(s), stan::model::cons_list(stan::model::index_min_max(1, get_base1(elements_per_shard, s, "elements_per_shard", 1)), stan::model::nil_index_list())), 
                        stan::model::rvalue(v, stan::model::cons_list(stan::model::index_min_max((i + 1), (i + get_base1(elements_per_shard, s, "elements_per_shard", 1))), stan::model::nil_index_list()), "v"), 
                        "assigning variable v_MPI");
            current_statement_begin__ = 75;
            stan::math::assign(i, (i + get_base1(elements_per_shard, s, "elements_per_shard", 1)));
        }
        current_statement_begin__ = 78;
        return stan::math::promote_scalar<fun_return_scalar_t__>(v_MPI);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct get_int_MPI_functor__ {
            std::vector<std::vector<int> >
    operator()(const std::vector<int>& v,
                const int& shards, std::ostream* pstream__) const {
        return get_int_MPI(v, shards, pstream__);
    }
};

template <typename T0__>
std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1> >
get_real_MPI(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& v,
                 const int& shards, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 83;
        validate_non_negative_index("elements_per_shard", "shards", shards);
        std::vector<int  > elements_per_shard(shards, int(0));
        stan::math::fill(elements_per_shard, std::numeric_limits<int>::min());
        stan::math::assign(elements_per_shard,get_elements_per_shard(rows(v), shards, pstream__));

        current_statement_begin__ = 84;
        int size_MPI_obj(0);
        (void) size_MPI_obj;  // dummy to suppress unused var warning
        stan::math::fill(size_MPI_obj, std::numeric_limits<int>::min());
        stan::math::assign(size_MPI_obj,get_base1(elements_per_shard, 1, "elements_per_shard", 1));

        current_statement_begin__ = 85;
        validate_non_negative_index("v_MPI", "size_MPI_obj", size_MPI_obj);
        validate_non_negative_index("v_MPI", "shards", shards);
        std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>  > v_MPI(shards, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>(size_MPI_obj));
        stan::math::initialize(v_MPI, DUMMY_VAR__);
        stan::math::fill(v_MPI, DUMMY_VAR__);

        current_statement_begin__ = 87;
        int i(0);
        (void) i;  // dummy to suppress unused var warning
        stan::math::fill(i, std::numeric_limits<int>::min());
        stan::math::assign(i,0);


        current_statement_begin__ = 89;
        for (int s = 1; s <= shards; ++s) {

            current_statement_begin__ = 90;
            stan::model::assign(v_MPI, 
                        stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list()), 
                        rep_vector(-(999.0), size_MPI_obj), 
                        "assigning variable v_MPI");
            current_statement_begin__ = 91;
            stan::model::assign(v_MPI, 
                        stan::model::cons_list(stan::model::index_uni(s), stan::model::cons_list(stan::model::index_min_max(1, get_base1(elements_per_shard, s, "elements_per_shard", 1)), stan::model::nil_index_list())), 
                        stan::model::rvalue(v, stan::model::cons_list(stan::model::index_min_max((i + 1), (i + get_base1(elements_per_shard, s, "elements_per_shard", 1))), stan::model::nil_index_list()), "v"), 
                        "assigning variable v_MPI");
            current_statement_begin__ = 92;
            stan::math::assign(i, (i + get_base1(elements_per_shard, s, "elements_per_shard", 1)));
        }
        current_statement_begin__ = 95;
        return stan::math::promote_scalar<fun_return_scalar_t__>(v_MPI);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct get_real_MPI_functor__ {
    template <typename T0__>
        std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1> >
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& v,
                 const int& shards, std::ostream* pstream__) const {
        return get_real_MPI(v, shards, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic, 1>
lp_reduce(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& global_parameters,
              const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& local_parameters,
              const std::vector<T2__>& real_data,
              const std::vector<int>& int_data, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 100;
        local_scalar_t__ lp(DUMMY_VAR__);
        (void) lp;  // dummy to suppress unused var warning
        stan::math::initialize(lp, DUMMY_VAR__);
        stan::math::fill(lp, DUMMY_VAR__);

        current_statement_begin__ = 101;
        local_scalar_t__ threshold(DUMMY_VAR__);
        (void) threshold;  // dummy to suppress unused var warning
        stan::math::initialize(threshold, DUMMY_VAR__);
        stan::math::fill(threshold, DUMMY_VAR__);
        stan::math::assign(threshold,-(999));

        current_statement_begin__ = 102;
        int size_buffer(0);
        (void) size_buffer;  // dummy to suppress unused var warning
        stan::math::fill(size_buffer, std::numeric_limits<int>::min());
        stan::math::assign(size_buffer,get_buffer_size(local_parameters, threshold, pstream__));

        current_statement_begin__ = 103;
        int size_vector(0);
        (void) size_vector;  // dummy to suppress unused var warning
        stan::math::fill(size_vector, std::numeric_limits<int>::min());
        stan::math::assign(size_vector,(rows(local_parameters) - size_buffer));


        current_statement_begin__ = 105;
        if (as_bool(logical_eq(min(stan::model::rvalue(local_parameters, stan::model::cons_list(stan::model::index_min_max(1, size_vector), stan::model::nil_index_list()), "local_parameters")), threshold))) {
            current_statement_begin__ = 105;
            if (pstream__) {
                stan_print(pstream__,"ERROR! The MPI implmentation is buggy");
                *pstream__ << std::endl;
            }
        }
        current_statement_begin__ = 108;
        stan::math::assign(lp, neg_binomial_2_log_log(stan::model::rvalue(int_data, stan::model::cons_list(stan::model::index_min_max(1, size_vector), stan::model::nil_index_list()), "int_data"), stan::model::rvalue(local_parameters, stan::model::cons_list(stan::model::index_min_max(1, size_vector), stan::model::nil_index_list()), "local_parameters"), elt_divide(1.0, stan::math::exp(add(multiply(get_base1(global_parameters, 2, "global_parameters", 1), stan::model::rvalue(local_parameters, stan::model::cons_list(stan::model::index_min_max(1, size_vector), stan::model::nil_index_list()), "local_parameters")), get_base1(global_parameters, 1, "global_parameters", 1))))));
        current_statement_begin__ = 114;
        return stan::math::promote_scalar<fun_return_scalar_t__>(transpose(stan::math::to_row_vector(stan::math::array_builder<local_scalar_t__ >().add(lp).array())));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct lp_reduce_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& global_parameters,
              const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& local_parameters,
              const std::vector<T2__>& real_data,
              const std::vector<int>& int_data, std::ostream* pstream__) const {
        return lp_reduce(global_parameters, local_parameters, real_data, int_data, pstream__);
    }
};

#include <stan_meta_header.hpp>
 class model_ARMET_tc : public prob_grad {
private:
        int G;
        int GM;
        int S;
        int CL;
        std::vector<int> counts_linear;
        std::vector<int> G_linear;
        std::vector<int> S_linear;
        double sigma_slope;
        double sigma_sigma;
        double sigma_intercept;
        int Q;
        int n_nodes;
        std::vector<int> ct_in_nodes;
        int n_levels;
        std::vector<int> ct_in_levels;
        int G1;
        std::vector<int> G1_linear;
        int G2;
        std::vector<int> G2_linear;
        int G3;
        std::vector<int> G3_linear;
        int G4;
        std::vector<int> G4_linear;
        int Y_1;
        std::vector<int> y_linear_1;
        std::vector<int> y_linear_S_1;
        std::vector<int> y_linear_GM_1;
        int Y_2;
        std::vector<int> y_linear_2;
        std::vector<int> y_linear_S_2;
        std::vector<int> y_linear_GM_2;
        int Y_3;
        std::vector<int> y_linear_3;
        std::vector<int> y_linear_S_3;
        std::vector<int> y_linear_GM_3;
        int Y_4;
        std::vector<int> y_linear_4;
        std::vector<int> y_linear_S_4;
        std::vector<int> y_linear_GM_4;
        int SLV2;
        int PLV2;
        std::vector<int> parents_lv2;
        std::vector<int> singles_lv2;
        int SLV3;
        int PLV3;
        std::vector<int> parents_lv3;
        std::vector<int> singles_lv3;
        int SLV4;
        int PLV4;
        std::vector<int> parents_lv4;
        std::vector<int> singles_lv4;
        std::vector<double> lambda_mu_prior;
        std::vector<double> lambda_sigma_prior;
        std::vector<double> lambda_skew_prior;
        std::vector<double> sigma_intercept_prior;
        int shards;
        std::vector<int> data_integer;
        std::vector<int> y_linear;
        std::vector<std::vector<double> > real_data;
public:
    model_ARMET_tc(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_ARMET_tc(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_ARMET_tc_namespace::model_ARMET_tc";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            // initialize data block variables from context__
            current_statement_begin__ = 123;
            context__.validate_dims("data initialization", "G", "int", context__.to_vec());
            G = int(0);
            vals_i__ = context__.vals_i("G");
            pos__ = 0;
            G = vals_i__[pos__++];
            check_greater_or_equal(function__, "G", G, 0);

            current_statement_begin__ = 124;
            context__.validate_dims("data initialization", "GM", "int", context__.to_vec());
            GM = int(0);
            vals_i__ = context__.vals_i("GM");
            pos__ = 0;
            GM = vals_i__[pos__++];
            check_greater_or_equal(function__, "GM", GM, 0);

            current_statement_begin__ = 125;
            context__.validate_dims("data initialization", "S", "int", context__.to_vec());
            S = int(0);
            vals_i__ = context__.vals_i("S");
            pos__ = 0;
            S = vals_i__[pos__++];
            check_greater_or_equal(function__, "S", S, 0);

            current_statement_begin__ = 126;
            context__.validate_dims("data initialization", "CL", "int", context__.to_vec());
            CL = int(0);
            vals_i__ = context__.vals_i("CL");
            pos__ = 0;
            CL = vals_i__[pos__++];

            current_statement_begin__ = 128;
            validate_non_negative_index("counts_linear", "CL", CL);
            context__.validate_dims("data initialization", "counts_linear", "int", context__.to_vec(CL));
            counts_linear = std::vector<int>(CL, int(0));
            vals_i__ = context__.vals_i("counts_linear");
            pos__ = 0;
            size_t counts_linear_k_0_max__ = CL;
            for (size_t k_0__ = 0; k_0__ < counts_linear_k_0_max__; ++k_0__) {
                counts_linear[k_0__] = vals_i__[pos__++];
            }

            current_statement_begin__ = 129;
            validate_non_negative_index("G_linear", "CL", CL);
            context__.validate_dims("data initialization", "G_linear", "int", context__.to_vec(CL));
            G_linear = std::vector<int>(CL, int(0));
            vals_i__ = context__.vals_i("G_linear");
            pos__ = 0;
            size_t G_linear_k_0_max__ = CL;
            for (size_t k_0__ = 0; k_0__ < G_linear_k_0_max__; ++k_0__) {
                G_linear[k_0__] = vals_i__[pos__++];
            }

            current_statement_begin__ = 130;
            validate_non_negative_index("S_linear", "CL", CL);
            context__.validate_dims("data initialization", "S_linear", "int", context__.to_vec(CL));
            S_linear = std::vector<int>(CL, int(0));
            vals_i__ = context__.vals_i("S_linear");
            pos__ = 0;
            size_t S_linear_k_0_max__ = CL;
            for (size_t k_0__ = 0; k_0__ < S_linear_k_0_max__; ++k_0__) {
                S_linear[k_0__] = vals_i__[pos__++];
            }

            current_statement_begin__ = 132;
            context__.validate_dims("data initialization", "sigma_slope", "double", context__.to_vec());
            sigma_slope = double(0);
            vals_r__ = context__.vals_r("sigma_slope");
            pos__ = 0;
            sigma_slope = vals_r__[pos__++];
            check_less_or_equal(function__, "sigma_slope", sigma_slope, 0);

            current_statement_begin__ = 133;
            context__.validate_dims("data initialization", "sigma_sigma", "double", context__.to_vec());
            sigma_sigma = double(0);
            vals_r__ = context__.vals_r("sigma_sigma");
            pos__ = 0;
            sigma_sigma = vals_r__[pos__++];
            check_greater_or_equal(function__, "sigma_sigma", sigma_sigma, 0);

            current_statement_begin__ = 134;
            context__.validate_dims("data initialization", "sigma_intercept", "double", context__.to_vec());
            sigma_intercept = double(0);
            vals_r__ = context__.vals_r("sigma_intercept");
            pos__ = 0;
            sigma_intercept = vals_r__[pos__++];

            current_statement_begin__ = 137;
            context__.validate_dims("data initialization", "Q", "int", context__.to_vec());
            Q = int(0);
            vals_i__ = context__.vals_i("Q");
            pos__ = 0;
            Q = vals_i__[pos__++];
            check_greater_or_equal(function__, "Q", Q, 0);

            current_statement_begin__ = 138;
            context__.validate_dims("data initialization", "n_nodes", "int", context__.to_vec());
            n_nodes = int(0);
            vals_i__ = context__.vals_i("n_nodes");
            pos__ = 0;
            n_nodes = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_nodes", n_nodes, 1);

            current_statement_begin__ = 139;
            validate_non_negative_index("ct_in_nodes", "n_nodes", n_nodes);
            context__.validate_dims("data initialization", "ct_in_nodes", "int", context__.to_vec(n_nodes));
            ct_in_nodes = std::vector<int>(n_nodes, int(0));
            vals_i__ = context__.vals_i("ct_in_nodes");
            pos__ = 0;
            size_t ct_in_nodes_k_0_max__ = n_nodes;
            for (size_t k_0__ = 0; k_0__ < ct_in_nodes_k_0_max__; ++k_0__) {
                ct_in_nodes[k_0__] = vals_i__[pos__++];
            }
            size_t ct_in_nodes_i_0_max__ = n_nodes;
            for (size_t i_0__ = 0; i_0__ < ct_in_nodes_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "ct_in_nodes[i_0__]", ct_in_nodes[i_0__], 1);
            }

            current_statement_begin__ = 140;
            context__.validate_dims("data initialization", "n_levels", "int", context__.to_vec());
            n_levels = int(0);
            vals_i__ = context__.vals_i("n_levels");
            pos__ = 0;
            n_levels = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_levels", n_levels, 1);

            current_statement_begin__ = 141;
            validate_non_negative_index("ct_in_levels", "n_levels", n_levels);
            context__.validate_dims("data initialization", "ct_in_levels", "int", context__.to_vec(n_levels));
            ct_in_levels = std::vector<int>(n_levels, int(0));
            vals_i__ = context__.vals_i("ct_in_levels");
            pos__ = 0;
            size_t ct_in_levels_k_0_max__ = n_levels;
            for (size_t k_0__ = 0; k_0__ < ct_in_levels_k_0_max__; ++k_0__) {
                ct_in_levels[k_0__] = vals_i__[pos__++];
            }
            size_t ct_in_levels_i_0_max__ = n_levels;
            for (size_t i_0__ = 0; i_0__ < ct_in_levels_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "ct_in_levels[i_0__]", ct_in_levels[i_0__], 1);
            }

            current_statement_begin__ = 144;
            context__.validate_dims("data initialization", "G1", "int", context__.to_vec());
            G1 = int(0);
            vals_i__ = context__.vals_i("G1");
            pos__ = 0;
            G1 = vals_i__[pos__++];
            check_greater_or_equal(function__, "G1", G1, 0);

            current_statement_begin__ = 145;
            validate_non_negative_index("G1_linear", "G1", G1);
            context__.validate_dims("data initialization", "G1_linear", "int", context__.to_vec(G1));
            G1_linear = std::vector<int>(G1, int(0));
            vals_i__ = context__.vals_i("G1_linear");
            pos__ = 0;
            size_t G1_linear_k_0_max__ = G1;
            for (size_t k_0__ = 0; k_0__ < G1_linear_k_0_max__; ++k_0__) {
                G1_linear[k_0__] = vals_i__[pos__++];
            }

            current_statement_begin__ = 146;
            context__.validate_dims("data initialization", "G2", "int", context__.to_vec());
            G2 = int(0);
            vals_i__ = context__.vals_i("G2");
            pos__ = 0;
            G2 = vals_i__[pos__++];
            check_greater_or_equal(function__, "G2", G2, 0);

            current_statement_begin__ = 147;
            validate_non_negative_index("G2_linear", "G2", G2);
            context__.validate_dims("data initialization", "G2_linear", "int", context__.to_vec(G2));
            G2_linear = std::vector<int>(G2, int(0));
            vals_i__ = context__.vals_i("G2_linear");
            pos__ = 0;
            size_t G2_linear_k_0_max__ = G2;
            for (size_t k_0__ = 0; k_0__ < G2_linear_k_0_max__; ++k_0__) {
                G2_linear[k_0__] = vals_i__[pos__++];
            }

            current_statement_begin__ = 148;
            context__.validate_dims("data initialization", "G3", "int", context__.to_vec());
            G3 = int(0);
            vals_i__ = context__.vals_i("G3");
            pos__ = 0;
            G3 = vals_i__[pos__++];
            check_greater_or_equal(function__, "G3", G3, 0);

            current_statement_begin__ = 149;
            validate_non_negative_index("G3_linear", "G3", G3);
            context__.validate_dims("data initialization", "G3_linear", "int", context__.to_vec(G3));
            G3_linear = std::vector<int>(G3, int(0));
            vals_i__ = context__.vals_i("G3_linear");
            pos__ = 0;
            size_t G3_linear_k_0_max__ = G3;
            for (size_t k_0__ = 0; k_0__ < G3_linear_k_0_max__; ++k_0__) {
                G3_linear[k_0__] = vals_i__[pos__++];
            }

            current_statement_begin__ = 150;
            context__.validate_dims("data initialization", "G4", "int", context__.to_vec());
            G4 = int(0);
            vals_i__ = context__.vals_i("G4");
            pos__ = 0;
            G4 = vals_i__[pos__++];
            check_greater_or_equal(function__, "G4", G4, 0);

            current_statement_begin__ = 151;
            validate_non_negative_index("G4_linear", "G4", G4);
            context__.validate_dims("data initialization", "G4_linear", "int", context__.to_vec(G4));
            G4_linear = std::vector<int>(G4, int(0));
            vals_i__ = context__.vals_i("G4_linear");
            pos__ = 0;
            size_t G4_linear_k_0_max__ = G4;
            for (size_t k_0__ = 0; k_0__ < G4_linear_k_0_max__; ++k_0__) {
                G4_linear[k_0__] = vals_i__[pos__++];
            }

            current_statement_begin__ = 154;
            context__.validate_dims("data initialization", "Y_1", "int", context__.to_vec());
            Y_1 = int(0);
            vals_i__ = context__.vals_i("Y_1");
            pos__ = 0;
            Y_1 = vals_i__[pos__++];
            check_greater_or_equal(function__, "Y_1", Y_1, 0);

            current_statement_begin__ = 155;
            validate_non_negative_index("y_linear_1", "Y_1", Y_1);
            context__.validate_dims("data initialization", "y_linear_1", "int", context__.to_vec(Y_1));
            y_linear_1 = std::vector<int>(Y_1, int(0));
            vals_i__ = context__.vals_i("y_linear_1");
            pos__ = 0;
            size_t y_linear_1_k_0_max__ = Y_1;
            for (size_t k_0__ = 0; k_0__ < y_linear_1_k_0_max__; ++k_0__) {
                y_linear_1[k_0__] = vals_i__[pos__++];
            }

            current_statement_begin__ = 156;
            validate_non_negative_index("y_linear_S_1", "Y_1", Y_1);
            context__.validate_dims("data initialization", "y_linear_S_1", "int", context__.to_vec(Y_1));
            y_linear_S_1 = std::vector<int>(Y_1, int(0));
            vals_i__ = context__.vals_i("y_linear_S_1");
            pos__ = 0;
            size_t y_linear_S_1_k_0_max__ = Y_1;
            for (size_t k_0__ = 0; k_0__ < y_linear_S_1_k_0_max__; ++k_0__) {
                y_linear_S_1[k_0__] = vals_i__[pos__++];
            }

            current_statement_begin__ = 157;
            validate_non_negative_index("y_linear_GM_1", "Y_1", Y_1);
            context__.validate_dims("data initialization", "y_linear_GM_1", "int", context__.to_vec(Y_1));
            y_linear_GM_1 = std::vector<int>(Y_1, int(0));
            vals_i__ = context__.vals_i("y_linear_GM_1");
            pos__ = 0;
            size_t y_linear_GM_1_k_0_max__ = Y_1;
            for (size_t k_0__ = 0; k_0__ < y_linear_GM_1_k_0_max__; ++k_0__) {
                y_linear_GM_1[k_0__] = vals_i__[pos__++];
            }

            current_statement_begin__ = 158;
            context__.validate_dims("data initialization", "Y_2", "int", context__.to_vec());
            Y_2 = int(0);
            vals_i__ = context__.vals_i("Y_2");
            pos__ = 0;
            Y_2 = vals_i__[pos__++];
            check_greater_or_equal(function__, "Y_2", Y_2, 0);

            current_statement_begin__ = 159;
            validate_non_negative_index("y_linear_2", "Y_2", Y_2);
            context__.validate_dims("data initialization", "y_linear_2", "int", context__.to_vec(Y_2));
            y_linear_2 = std::vector<int>(Y_2, int(0));
            vals_i__ = context__.vals_i("y_linear_2");
            pos__ = 0;
            size_t y_linear_2_k_0_max__ = Y_2;
            for (size_t k_0__ = 0; k_0__ < y_linear_2_k_0_max__; ++k_0__) {
                y_linear_2[k_0__] = vals_i__[pos__++];
            }

            current_statement_begin__ = 160;
            validate_non_negative_index("y_linear_S_2", "Y_2", Y_2);
            context__.validate_dims("data initialization", "y_linear_S_2", "int", context__.to_vec(Y_2));
            y_linear_S_2 = std::vector<int>(Y_2, int(0));
            vals_i__ = context__.vals_i("y_linear_S_2");
            pos__ = 0;
            size_t y_linear_S_2_k_0_max__ = Y_2;
            for (size_t k_0__ = 0; k_0__ < y_linear_S_2_k_0_max__; ++k_0__) {
                y_linear_S_2[k_0__] = vals_i__[pos__++];
            }

            current_statement_begin__ = 161;
            validate_non_negative_index("y_linear_GM_2", "Y_2", Y_2);
            context__.validate_dims("data initialization", "y_linear_GM_2", "int", context__.to_vec(Y_2));
            y_linear_GM_2 = std::vector<int>(Y_2, int(0));
            vals_i__ = context__.vals_i("y_linear_GM_2");
            pos__ = 0;
            size_t y_linear_GM_2_k_0_max__ = Y_2;
            for (size_t k_0__ = 0; k_0__ < y_linear_GM_2_k_0_max__; ++k_0__) {
                y_linear_GM_2[k_0__] = vals_i__[pos__++];
            }

            current_statement_begin__ = 162;
            context__.validate_dims("data initialization", "Y_3", "int", context__.to_vec());
            Y_3 = int(0);
            vals_i__ = context__.vals_i("Y_3");
            pos__ = 0;
            Y_3 = vals_i__[pos__++];
            check_greater_or_equal(function__, "Y_3", Y_3, 0);

            current_statement_begin__ = 163;
            validate_non_negative_index("y_linear_3", "Y_3", Y_3);
            context__.validate_dims("data initialization", "y_linear_3", "int", context__.to_vec(Y_3));
            y_linear_3 = std::vector<int>(Y_3, int(0));
            vals_i__ = context__.vals_i("y_linear_3");
            pos__ = 0;
            size_t y_linear_3_k_0_max__ = Y_3;
            for (size_t k_0__ = 0; k_0__ < y_linear_3_k_0_max__; ++k_0__) {
                y_linear_3[k_0__] = vals_i__[pos__++];
            }

            current_statement_begin__ = 164;
            validate_non_negative_index("y_linear_S_3", "Y_3", Y_3);
            context__.validate_dims("data initialization", "y_linear_S_3", "int", context__.to_vec(Y_3));
            y_linear_S_3 = std::vector<int>(Y_3, int(0));
            vals_i__ = context__.vals_i("y_linear_S_3");
            pos__ = 0;
            size_t y_linear_S_3_k_0_max__ = Y_3;
            for (size_t k_0__ = 0; k_0__ < y_linear_S_3_k_0_max__; ++k_0__) {
                y_linear_S_3[k_0__] = vals_i__[pos__++];
            }

            current_statement_begin__ = 165;
            validate_non_negative_index("y_linear_GM_3", "Y_3", Y_3);
            context__.validate_dims("data initialization", "y_linear_GM_3", "int", context__.to_vec(Y_3));
            y_linear_GM_3 = std::vector<int>(Y_3, int(0));
            vals_i__ = context__.vals_i("y_linear_GM_3");
            pos__ = 0;
            size_t y_linear_GM_3_k_0_max__ = Y_3;
            for (size_t k_0__ = 0; k_0__ < y_linear_GM_3_k_0_max__; ++k_0__) {
                y_linear_GM_3[k_0__] = vals_i__[pos__++];
            }

            current_statement_begin__ = 166;
            context__.validate_dims("data initialization", "Y_4", "int", context__.to_vec());
            Y_4 = int(0);
            vals_i__ = context__.vals_i("Y_4");
            pos__ = 0;
            Y_4 = vals_i__[pos__++];
            check_greater_or_equal(function__, "Y_4", Y_4, 0);

            current_statement_begin__ = 167;
            validate_non_negative_index("y_linear_4", "Y_4", Y_4);
            context__.validate_dims("data initialization", "y_linear_4", "int", context__.to_vec(Y_4));
            y_linear_4 = std::vector<int>(Y_4, int(0));
            vals_i__ = context__.vals_i("y_linear_4");
            pos__ = 0;
            size_t y_linear_4_k_0_max__ = Y_4;
            for (size_t k_0__ = 0; k_0__ < y_linear_4_k_0_max__; ++k_0__) {
                y_linear_4[k_0__] = vals_i__[pos__++];
            }

            current_statement_begin__ = 168;
            validate_non_negative_index("y_linear_S_4", "Y_4", Y_4);
            context__.validate_dims("data initialization", "y_linear_S_4", "int", context__.to_vec(Y_4));
            y_linear_S_4 = std::vector<int>(Y_4, int(0));
            vals_i__ = context__.vals_i("y_linear_S_4");
            pos__ = 0;
            size_t y_linear_S_4_k_0_max__ = Y_4;
            for (size_t k_0__ = 0; k_0__ < y_linear_S_4_k_0_max__; ++k_0__) {
                y_linear_S_4[k_0__] = vals_i__[pos__++];
            }

            current_statement_begin__ = 169;
            validate_non_negative_index("y_linear_GM_4", "Y_4", Y_4);
            context__.validate_dims("data initialization", "y_linear_GM_4", "int", context__.to_vec(Y_4));
            y_linear_GM_4 = std::vector<int>(Y_4, int(0));
            vals_i__ = context__.vals_i("y_linear_GM_4");
            pos__ = 0;
            size_t y_linear_GM_4_k_0_max__ = Y_4;
            for (size_t k_0__ = 0; k_0__ < y_linear_GM_4_k_0_max__; ++k_0__) {
                y_linear_GM_4[k_0__] = vals_i__[pos__++];
            }

            current_statement_begin__ = 172;
            context__.validate_dims("data initialization", "SLV2", "int", context__.to_vec());
            SLV2 = int(0);
            vals_i__ = context__.vals_i("SLV2");
            pos__ = 0;
            SLV2 = vals_i__[pos__++];
            check_greater_or_equal(function__, "SLV2", SLV2, 1);

            current_statement_begin__ = 173;
            context__.validate_dims("data initialization", "PLV2", "int", context__.to_vec());
            PLV2 = int(0);
            vals_i__ = context__.vals_i("PLV2");
            pos__ = 0;
            PLV2 = vals_i__[pos__++];
            check_greater_or_equal(function__, "PLV2", PLV2, 1);

            current_statement_begin__ = 174;
            validate_non_negative_index("parents_lv2", "PLV2", PLV2);
            context__.validate_dims("data initialization", "parents_lv2", "int", context__.to_vec(PLV2));
            parents_lv2 = std::vector<int>(PLV2, int(0));
            vals_i__ = context__.vals_i("parents_lv2");
            pos__ = 0;
            size_t parents_lv2_k_0_max__ = PLV2;
            for (size_t k_0__ = 0; k_0__ < parents_lv2_k_0_max__; ++k_0__) {
                parents_lv2[k_0__] = vals_i__[pos__++];
            }

            current_statement_begin__ = 175;
            validate_non_negative_index("singles_lv2", "SLV2", SLV2);
            context__.validate_dims("data initialization", "singles_lv2", "int", context__.to_vec(SLV2));
            singles_lv2 = std::vector<int>(SLV2, int(0));
            vals_i__ = context__.vals_i("singles_lv2");
            pos__ = 0;
            size_t singles_lv2_k_0_max__ = SLV2;
            for (size_t k_0__ = 0; k_0__ < singles_lv2_k_0_max__; ++k_0__) {
                singles_lv2[k_0__] = vals_i__[pos__++];
            }

            current_statement_begin__ = 178;
            context__.validate_dims("data initialization", "SLV3", "int", context__.to_vec());
            SLV3 = int(0);
            vals_i__ = context__.vals_i("SLV3");
            pos__ = 0;
            SLV3 = vals_i__[pos__++];
            check_greater_or_equal(function__, "SLV3", SLV3, 1);

            current_statement_begin__ = 179;
            context__.validate_dims("data initialization", "PLV3", "int", context__.to_vec());
            PLV3 = int(0);
            vals_i__ = context__.vals_i("PLV3");
            pos__ = 0;
            PLV3 = vals_i__[pos__++];
            check_greater_or_equal(function__, "PLV3", PLV3, 1);

            current_statement_begin__ = 180;
            validate_non_negative_index("parents_lv3", "PLV3", PLV3);
            context__.validate_dims("data initialization", "parents_lv3", "int", context__.to_vec(PLV3));
            parents_lv3 = std::vector<int>(PLV3, int(0));
            vals_i__ = context__.vals_i("parents_lv3");
            pos__ = 0;
            size_t parents_lv3_k_0_max__ = PLV3;
            for (size_t k_0__ = 0; k_0__ < parents_lv3_k_0_max__; ++k_0__) {
                parents_lv3[k_0__] = vals_i__[pos__++];
            }

            current_statement_begin__ = 181;
            validate_non_negative_index("singles_lv3", "SLV3", SLV3);
            context__.validate_dims("data initialization", "singles_lv3", "int", context__.to_vec(SLV3));
            singles_lv3 = std::vector<int>(SLV3, int(0));
            vals_i__ = context__.vals_i("singles_lv3");
            pos__ = 0;
            size_t singles_lv3_k_0_max__ = SLV3;
            for (size_t k_0__ = 0; k_0__ < singles_lv3_k_0_max__; ++k_0__) {
                singles_lv3[k_0__] = vals_i__[pos__++];
            }

            current_statement_begin__ = 184;
            context__.validate_dims("data initialization", "SLV4", "int", context__.to_vec());
            SLV4 = int(0);
            vals_i__ = context__.vals_i("SLV4");
            pos__ = 0;
            SLV4 = vals_i__[pos__++];
            check_greater_or_equal(function__, "SLV4", SLV4, 1);

            current_statement_begin__ = 185;
            context__.validate_dims("data initialization", "PLV4", "int", context__.to_vec());
            PLV4 = int(0);
            vals_i__ = context__.vals_i("PLV4");
            pos__ = 0;
            PLV4 = vals_i__[pos__++];
            check_greater_or_equal(function__, "PLV4", PLV4, 1);

            current_statement_begin__ = 186;
            validate_non_negative_index("parents_lv4", "PLV4", PLV4);
            context__.validate_dims("data initialization", "parents_lv4", "int", context__.to_vec(PLV4));
            parents_lv4 = std::vector<int>(PLV4, int(0));
            vals_i__ = context__.vals_i("parents_lv4");
            pos__ = 0;
            size_t parents_lv4_k_0_max__ = PLV4;
            for (size_t k_0__ = 0; k_0__ < parents_lv4_k_0_max__; ++k_0__) {
                parents_lv4[k_0__] = vals_i__[pos__++];
            }

            current_statement_begin__ = 187;
            validate_non_negative_index("singles_lv4", "SLV4", SLV4);
            context__.validate_dims("data initialization", "singles_lv4", "int", context__.to_vec(SLV4));
            singles_lv4 = std::vector<int>(SLV4, int(0));
            vals_i__ = context__.vals_i("singles_lv4");
            pos__ = 0;
            size_t singles_lv4_k_0_max__ = SLV4;
            for (size_t k_0__ = 0; k_0__ < singles_lv4_k_0_max__; ++k_0__) {
                singles_lv4[k_0__] = vals_i__[pos__++];
            }

            current_statement_begin__ = 190;
            validate_non_negative_index("lambda_mu_prior", "2", 2);
            context__.validate_dims("data initialization", "lambda_mu_prior", "double", context__.to_vec(2));
            lambda_mu_prior = std::vector<double>(2, double(0));
            vals_r__ = context__.vals_r("lambda_mu_prior");
            pos__ = 0;
            size_t lambda_mu_prior_k_0_max__ = 2;
            for (size_t k_0__ = 0; k_0__ < lambda_mu_prior_k_0_max__; ++k_0__) {
                lambda_mu_prior[k_0__] = vals_r__[pos__++];
            }

            current_statement_begin__ = 191;
            validate_non_negative_index("lambda_sigma_prior", "2", 2);
            context__.validate_dims("data initialization", "lambda_sigma_prior", "double", context__.to_vec(2));
            lambda_sigma_prior = std::vector<double>(2, double(0));
            vals_r__ = context__.vals_r("lambda_sigma_prior");
            pos__ = 0;
            size_t lambda_sigma_prior_k_0_max__ = 2;
            for (size_t k_0__ = 0; k_0__ < lambda_sigma_prior_k_0_max__; ++k_0__) {
                lambda_sigma_prior[k_0__] = vals_r__[pos__++];
            }

            current_statement_begin__ = 192;
            validate_non_negative_index("lambda_skew_prior", "2", 2);
            context__.validate_dims("data initialization", "lambda_skew_prior", "double", context__.to_vec(2));
            lambda_skew_prior = std::vector<double>(2, double(0));
            vals_r__ = context__.vals_r("lambda_skew_prior");
            pos__ = 0;
            size_t lambda_skew_prior_k_0_max__ = 2;
            for (size_t k_0__ = 0; k_0__ < lambda_skew_prior_k_0_max__; ++k_0__) {
                lambda_skew_prior[k_0__] = vals_r__[pos__++];
            }

            current_statement_begin__ = 193;
            validate_non_negative_index("sigma_intercept_prior", "2", 2);
            context__.validate_dims("data initialization", "sigma_intercept_prior", "double", context__.to_vec(2));
            sigma_intercept_prior = std::vector<double>(2, double(0));
            vals_r__ = context__.vals_r("sigma_intercept_prior");
            pos__ = 0;
            size_t sigma_intercept_prior_k_0_max__ = 2;
            for (size_t k_0__ = 0; k_0__ < sigma_intercept_prior_k_0_max__; ++k_0__) {
                sigma_intercept_prior[k_0__] = vals_r__[pos__++];
            }

            current_statement_begin__ = 196;
            context__.validate_dims("data initialization", "shards", "int", context__.to_vec());
            shards = int(0);
            vals_i__ = context__.vals_i("shards");
            pos__ = 0;
            shards = vals_i__[pos__++];


            // initialize transformed data variables
            current_statement_begin__ = 201;
            validate_non_negative_index("data_integer", "((((CL + Y_1) + Y_2) + Y_3) + Y_4)", ((((CL + Y_1) + Y_2) + Y_3) + Y_4));
            data_integer = std::vector<int>(((((CL + Y_1) + Y_2) + Y_3) + Y_4), int(0));
            stan::math::fill(data_integer, std::numeric_limits<int>::min());
            stan::math::assign(data_integer,append_array(append_array(append_array(append_array(counts_linear, y_linear_1), y_linear_2), y_linear_3), y_linear_4));

            current_statement_begin__ = 213;
            validate_non_negative_index("y_linear", "(((Y_1 + Y_2) + Y_3) + Y_4)", (((Y_1 + Y_2) + Y_3) + Y_4));
            y_linear = std::vector<int>((((Y_1 + Y_2) + Y_3) + Y_4), int(0));
            stan::math::fill(y_linear, std::numeric_limits<int>::min());
            stan::math::assign(y_linear,append_array(append_array(append_array(y_linear_1, y_linear_2), y_linear_3), y_linear_4));

            current_statement_begin__ = 215;
            validate_non_negative_index("real_data", "shards", shards);
            validate_non_negative_index("real_data", "0", 0);
            real_data = std::vector<std::vector<double> >(shards, std::vector<double>(0, double(0)));
            stan::math::fill(real_data, DUMMY_VAR__);
            stan::math::assign(real_data,rep_array(0.0, shards, 0));

            // execute transformed data statements

            // validate transformed data

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 220;
            num_params_r__ += 1;
            current_statement_begin__ = 221;
            num_params_r__ += 1;
            current_statement_begin__ = 222;
            num_params_r__ += 1;
            current_statement_begin__ = 224;
            num_params_r__ += 1;
            current_statement_begin__ = 228;
            validate_non_negative_index("lambda_log", "G", G);
            num_params_r__ += G;
            current_statement_begin__ = 229;
            validate_non_negative_index("sigma_inv_log", "G", G);
            num_params_r__ += G;
            current_statement_begin__ = 230;
            validate_non_negative_index("exposure_rate", "S", S);
            num_params_r__ += S;
            current_statement_begin__ = 233;
            validate_non_negative_index("prop_1", "get_base1(ct_in_nodes, 1, \"ct_in_nodes\", 1)", get_base1(ct_in_nodes, 1, "ct_in_nodes", 1));
            validate_non_negative_index("prop_1", "Q", Q);
            num_params_r__ += ((get_base1(ct_in_nodes, 1, "ct_in_nodes", 1) - 1) * Q);
            current_statement_begin__ = 234;
            validate_non_negative_index("prop_a", "get_base1(ct_in_nodes, 2, \"ct_in_nodes\", 1)", get_base1(ct_in_nodes, 2, "ct_in_nodes", 1));
            validate_non_negative_index("prop_a", "Q", Q);
            num_params_r__ += ((get_base1(ct_in_nodes, 2, "ct_in_nodes", 1) - 1) * Q);
            current_statement_begin__ = 237;
            validate_non_negative_index("prop_b", "get_base1(ct_in_nodes, 3, \"ct_in_nodes\", 1)", get_base1(ct_in_nodes, 3, "ct_in_nodes", 1));
            validate_non_negative_index("prop_b", "Q", Q);
            num_params_r__ += ((get_base1(ct_in_nodes, 3, "ct_in_nodes", 1) - 1) * Q);
            current_statement_begin__ = 238;
            validate_non_negative_index("prop_c", "get_base1(ct_in_nodes, 4, \"ct_in_nodes\", 1)", get_base1(ct_in_nodes, 4, "ct_in_nodes", 1));
            validate_non_negative_index("prop_c", "Q", Q);
            num_params_r__ += ((get_base1(ct_in_nodes, 4, "ct_in_nodes", 1) - 1) * Q);
            current_statement_begin__ = 239;
            validate_non_negative_index("prop_d", "get_base1(ct_in_nodes, 5, \"ct_in_nodes\", 1)", get_base1(ct_in_nodes, 5, "ct_in_nodes", 1));
            validate_non_negative_index("prop_d", "Q", Q);
            num_params_r__ += ((get_base1(ct_in_nodes, 5, "ct_in_nodes", 1) - 1) * Q);
            current_statement_begin__ = 240;
            validate_non_negative_index("prop_e", "get_base1(ct_in_nodes, 6, \"ct_in_nodes\", 1)", get_base1(ct_in_nodes, 6, "ct_in_nodes", 1));
            validate_non_negative_index("prop_e", "Q", Q);
            num_params_r__ += ((get_base1(ct_in_nodes, 6, "ct_in_nodes", 1) - 1) * Q);
            current_statement_begin__ = 243;
            validate_non_negative_index("prop_f", "get_base1(ct_in_nodes, 7, \"ct_in_nodes\", 1)", get_base1(ct_in_nodes, 7, "ct_in_nodes", 1));
            validate_non_negative_index("prop_f", "Q", Q);
            num_params_r__ += ((get_base1(ct_in_nodes, 7, "ct_in_nodes", 1) - 1) * Q);
            current_statement_begin__ = 244;
            validate_non_negative_index("prop_g", "get_base1(ct_in_nodes, 8, \"ct_in_nodes\", 1)", get_base1(ct_in_nodes, 8, "ct_in_nodes", 1));
            validate_non_negative_index("prop_g", "Q", Q);
            num_params_r__ += ((get_base1(ct_in_nodes, 8, "ct_in_nodes", 1) - 1) * Q);
            current_statement_begin__ = 245;
            validate_non_negative_index("prop_h", "get_base1(ct_in_nodes, 9, \"ct_in_nodes\", 1)", get_base1(ct_in_nodes, 9, "ct_in_nodes", 1));
            validate_non_negative_index("prop_h", "Q", Q);
            num_params_r__ += ((get_base1(ct_in_nodes, 9, "ct_in_nodes", 1) - 1) * Q);
            current_statement_begin__ = 246;
            validate_non_negative_index("prop_i", "get_base1(ct_in_nodes, 10, \"ct_in_nodes\", 1)", get_base1(ct_in_nodes, 10, "ct_in_nodes", 1));
            validate_non_negative_index("prop_i", "Q", Q);
            num_params_r__ += ((get_base1(ct_in_nodes, 10, "ct_in_nodes", 1) - 1) * Q);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~model_ARMET_tc() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        current_statement_begin__ = 220;
        if (!(context__.contains_r("lambda_mu")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable lambda_mu missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("lambda_mu");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "lambda_mu", "double", context__.to_vec());
        double lambda_mu(0);
        lambda_mu = vals_r__[pos__++];
        try {
            writer__.scalar_offset_multiplier_unconstrain(get_base1(lambda_mu_prior, 1, "lambda_mu_prior", 1), get_base1(lambda_mu_prior, 2, "lambda_mu_prior", 1), lambda_mu);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable lambda_mu: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 221;
        if (!(context__.contains_r("lambda_sigma")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable lambda_sigma missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("lambda_sigma");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "lambda_sigma", "double", context__.to_vec());
        double lambda_sigma(0);
        lambda_sigma = vals_r__[pos__++];
        try {
            writer__.scalar_offset_multiplier_unconstrain(get_base1(lambda_sigma_prior, 1, "lambda_sigma_prior", 1), get_base1(lambda_sigma_prior, 2, "lambda_sigma_prior", 1), lambda_sigma);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable lambda_sigma: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 222;
        if (!(context__.contains_r("lambda_skew")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable lambda_skew missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("lambda_skew");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "lambda_skew", "double", context__.to_vec());
        double lambda_skew(0);
        lambda_skew = vals_r__[pos__++];
        try {
            writer__.scalar_offset_multiplier_unconstrain(get_base1(lambda_skew_prior, 1, "lambda_skew_prior", 1), get_base1(lambda_skew_prior, 2, "lambda_skew_prior", 1), lambda_skew);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable lambda_skew: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 224;
        if (!(context__.contains_r("sigma_intercept_dec")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_intercept_dec missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_intercept_dec");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma_intercept_dec", "double", context__.to_vec());
        double sigma_intercept_dec(0);
        sigma_intercept_dec = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(sigma_intercept_dec);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_intercept_dec: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 228;
        if (!(context__.contains_r("lambda_log")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable lambda_log missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("lambda_log");
        pos__ = 0U;
        validate_non_negative_index("lambda_log", "G", G);
        context__.validate_dims("parameter initialization", "lambda_log", "vector_d", context__.to_vec(G));
        Eigen::Matrix<double, Eigen::Dynamic, 1> lambda_log(G);
        size_t lambda_log_j_1_max__ = G;
        for (size_t j_1__ = 0; j_1__ < lambda_log_j_1_max__; ++j_1__) {
            lambda_log(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(lambda_log);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable lambda_log: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 229;
        if (!(context__.contains_r("sigma_inv_log")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_inv_log missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_inv_log");
        pos__ = 0U;
        validate_non_negative_index("sigma_inv_log", "G", G);
        context__.validate_dims("parameter initialization", "sigma_inv_log", "vector_d", context__.to_vec(G));
        Eigen::Matrix<double, Eigen::Dynamic, 1> sigma_inv_log(G);
        size_t sigma_inv_log_j_1_max__ = G;
        for (size_t j_1__ = 0; j_1__ < sigma_inv_log_j_1_max__; ++j_1__) {
            sigma_inv_log(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(sigma_inv_log);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_inv_log: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 230;
        if (!(context__.contains_r("exposure_rate")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable exposure_rate missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("exposure_rate");
        pos__ = 0U;
        validate_non_negative_index("exposure_rate", "S", S);
        context__.validate_dims("parameter initialization", "exposure_rate", "vector_d", context__.to_vec(S));
        Eigen::Matrix<double, Eigen::Dynamic, 1> exposure_rate(S);
        size_t exposure_rate_j_1_max__ = S;
        for (size_t j_1__ = 0; j_1__ < exposure_rate_j_1_max__; ++j_1__) {
            exposure_rate(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(exposure_rate);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable exposure_rate: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 233;
        if (!(context__.contains_r("prop_1")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable prop_1 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("prop_1");
        pos__ = 0U;
        validate_non_negative_index("prop_1", "get_base1(ct_in_nodes, 1, \"ct_in_nodes\", 1)", get_base1(ct_in_nodes, 1, "ct_in_nodes", 1));
        validate_non_negative_index("prop_1", "Q", Q);
        context__.validate_dims("parameter initialization", "prop_1", "vector_d", context__.to_vec(Q,get_base1(ct_in_nodes, 1, "ct_in_nodes", 1)));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > prop_1(Q, Eigen::Matrix<double, Eigen::Dynamic, 1>(get_base1(ct_in_nodes, 1, "ct_in_nodes", 1)));
        size_t prop_1_j_1_max__ = get_base1(ct_in_nodes, 1, "ct_in_nodes", 1);
        size_t prop_1_k_0_max__ = Q;
        for (size_t j_1__ = 0; j_1__ < prop_1_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < prop_1_k_0_max__; ++k_0__) {
                prop_1[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t prop_1_i_0_max__ = Q;
        for (size_t i_0__ = 0; i_0__ < prop_1_i_0_max__; ++i_0__) {
            try {
                writer__.simplex_unconstrain(prop_1[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable prop_1: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }

        current_statement_begin__ = 234;
        if (!(context__.contains_r("prop_a")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable prop_a missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("prop_a");
        pos__ = 0U;
        validate_non_negative_index("prop_a", "get_base1(ct_in_nodes, 2, \"ct_in_nodes\", 1)", get_base1(ct_in_nodes, 2, "ct_in_nodes", 1));
        validate_non_negative_index("prop_a", "Q", Q);
        context__.validate_dims("parameter initialization", "prop_a", "vector_d", context__.to_vec(Q,get_base1(ct_in_nodes, 2, "ct_in_nodes", 1)));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > prop_a(Q, Eigen::Matrix<double, Eigen::Dynamic, 1>(get_base1(ct_in_nodes, 2, "ct_in_nodes", 1)));
        size_t prop_a_j_1_max__ = get_base1(ct_in_nodes, 2, "ct_in_nodes", 1);
        size_t prop_a_k_0_max__ = Q;
        for (size_t j_1__ = 0; j_1__ < prop_a_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < prop_a_k_0_max__; ++k_0__) {
                prop_a[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t prop_a_i_0_max__ = Q;
        for (size_t i_0__ = 0; i_0__ < prop_a_i_0_max__; ++i_0__) {
            try {
                writer__.simplex_unconstrain(prop_a[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable prop_a: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }

        current_statement_begin__ = 237;
        if (!(context__.contains_r("prop_b")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable prop_b missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("prop_b");
        pos__ = 0U;
        validate_non_negative_index("prop_b", "get_base1(ct_in_nodes, 3, \"ct_in_nodes\", 1)", get_base1(ct_in_nodes, 3, "ct_in_nodes", 1));
        validate_non_negative_index("prop_b", "Q", Q);
        context__.validate_dims("parameter initialization", "prop_b", "vector_d", context__.to_vec(Q,get_base1(ct_in_nodes, 3, "ct_in_nodes", 1)));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > prop_b(Q, Eigen::Matrix<double, Eigen::Dynamic, 1>(get_base1(ct_in_nodes, 3, "ct_in_nodes", 1)));
        size_t prop_b_j_1_max__ = get_base1(ct_in_nodes, 3, "ct_in_nodes", 1);
        size_t prop_b_k_0_max__ = Q;
        for (size_t j_1__ = 0; j_1__ < prop_b_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < prop_b_k_0_max__; ++k_0__) {
                prop_b[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t prop_b_i_0_max__ = Q;
        for (size_t i_0__ = 0; i_0__ < prop_b_i_0_max__; ++i_0__) {
            try {
                writer__.simplex_unconstrain(prop_b[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable prop_b: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }

        current_statement_begin__ = 238;
        if (!(context__.contains_r("prop_c")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable prop_c missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("prop_c");
        pos__ = 0U;
        validate_non_negative_index("prop_c", "get_base1(ct_in_nodes, 4, \"ct_in_nodes\", 1)", get_base1(ct_in_nodes, 4, "ct_in_nodes", 1));
        validate_non_negative_index("prop_c", "Q", Q);
        context__.validate_dims("parameter initialization", "prop_c", "vector_d", context__.to_vec(Q,get_base1(ct_in_nodes, 4, "ct_in_nodes", 1)));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > prop_c(Q, Eigen::Matrix<double, Eigen::Dynamic, 1>(get_base1(ct_in_nodes, 4, "ct_in_nodes", 1)));
        size_t prop_c_j_1_max__ = get_base1(ct_in_nodes, 4, "ct_in_nodes", 1);
        size_t prop_c_k_0_max__ = Q;
        for (size_t j_1__ = 0; j_1__ < prop_c_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < prop_c_k_0_max__; ++k_0__) {
                prop_c[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t prop_c_i_0_max__ = Q;
        for (size_t i_0__ = 0; i_0__ < prop_c_i_0_max__; ++i_0__) {
            try {
                writer__.simplex_unconstrain(prop_c[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable prop_c: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }

        current_statement_begin__ = 239;
        if (!(context__.contains_r("prop_d")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable prop_d missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("prop_d");
        pos__ = 0U;
        validate_non_negative_index("prop_d", "get_base1(ct_in_nodes, 5, \"ct_in_nodes\", 1)", get_base1(ct_in_nodes, 5, "ct_in_nodes", 1));
        validate_non_negative_index("prop_d", "Q", Q);
        context__.validate_dims("parameter initialization", "prop_d", "vector_d", context__.to_vec(Q,get_base1(ct_in_nodes, 5, "ct_in_nodes", 1)));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > prop_d(Q, Eigen::Matrix<double, Eigen::Dynamic, 1>(get_base1(ct_in_nodes, 5, "ct_in_nodes", 1)));
        size_t prop_d_j_1_max__ = get_base1(ct_in_nodes, 5, "ct_in_nodes", 1);
        size_t prop_d_k_0_max__ = Q;
        for (size_t j_1__ = 0; j_1__ < prop_d_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < prop_d_k_0_max__; ++k_0__) {
                prop_d[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t prop_d_i_0_max__ = Q;
        for (size_t i_0__ = 0; i_0__ < prop_d_i_0_max__; ++i_0__) {
            try {
                writer__.simplex_unconstrain(prop_d[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable prop_d: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }

        current_statement_begin__ = 240;
        if (!(context__.contains_r("prop_e")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable prop_e missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("prop_e");
        pos__ = 0U;
        validate_non_negative_index("prop_e", "get_base1(ct_in_nodes, 6, \"ct_in_nodes\", 1)", get_base1(ct_in_nodes, 6, "ct_in_nodes", 1));
        validate_non_negative_index("prop_e", "Q", Q);
        context__.validate_dims("parameter initialization", "prop_e", "vector_d", context__.to_vec(Q,get_base1(ct_in_nodes, 6, "ct_in_nodes", 1)));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > prop_e(Q, Eigen::Matrix<double, Eigen::Dynamic, 1>(get_base1(ct_in_nodes, 6, "ct_in_nodes", 1)));
        size_t prop_e_j_1_max__ = get_base1(ct_in_nodes, 6, "ct_in_nodes", 1);
        size_t prop_e_k_0_max__ = Q;
        for (size_t j_1__ = 0; j_1__ < prop_e_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < prop_e_k_0_max__; ++k_0__) {
                prop_e[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t prop_e_i_0_max__ = Q;
        for (size_t i_0__ = 0; i_0__ < prop_e_i_0_max__; ++i_0__) {
            try {
                writer__.simplex_unconstrain(prop_e[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable prop_e: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }

        current_statement_begin__ = 243;
        if (!(context__.contains_r("prop_f")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable prop_f missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("prop_f");
        pos__ = 0U;
        validate_non_negative_index("prop_f", "get_base1(ct_in_nodes, 7, \"ct_in_nodes\", 1)", get_base1(ct_in_nodes, 7, "ct_in_nodes", 1));
        validate_non_negative_index("prop_f", "Q", Q);
        context__.validate_dims("parameter initialization", "prop_f", "vector_d", context__.to_vec(Q,get_base1(ct_in_nodes, 7, "ct_in_nodes", 1)));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > prop_f(Q, Eigen::Matrix<double, Eigen::Dynamic, 1>(get_base1(ct_in_nodes, 7, "ct_in_nodes", 1)));
        size_t prop_f_j_1_max__ = get_base1(ct_in_nodes, 7, "ct_in_nodes", 1);
        size_t prop_f_k_0_max__ = Q;
        for (size_t j_1__ = 0; j_1__ < prop_f_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < prop_f_k_0_max__; ++k_0__) {
                prop_f[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t prop_f_i_0_max__ = Q;
        for (size_t i_0__ = 0; i_0__ < prop_f_i_0_max__; ++i_0__) {
            try {
                writer__.simplex_unconstrain(prop_f[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable prop_f: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }

        current_statement_begin__ = 244;
        if (!(context__.contains_r("prop_g")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable prop_g missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("prop_g");
        pos__ = 0U;
        validate_non_negative_index("prop_g", "get_base1(ct_in_nodes, 8, \"ct_in_nodes\", 1)", get_base1(ct_in_nodes, 8, "ct_in_nodes", 1));
        validate_non_negative_index("prop_g", "Q", Q);
        context__.validate_dims("parameter initialization", "prop_g", "vector_d", context__.to_vec(Q,get_base1(ct_in_nodes, 8, "ct_in_nodes", 1)));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > prop_g(Q, Eigen::Matrix<double, Eigen::Dynamic, 1>(get_base1(ct_in_nodes, 8, "ct_in_nodes", 1)));
        size_t prop_g_j_1_max__ = get_base1(ct_in_nodes, 8, "ct_in_nodes", 1);
        size_t prop_g_k_0_max__ = Q;
        for (size_t j_1__ = 0; j_1__ < prop_g_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < prop_g_k_0_max__; ++k_0__) {
                prop_g[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t prop_g_i_0_max__ = Q;
        for (size_t i_0__ = 0; i_0__ < prop_g_i_0_max__; ++i_0__) {
            try {
                writer__.simplex_unconstrain(prop_g[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable prop_g: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }

        current_statement_begin__ = 245;
        if (!(context__.contains_r("prop_h")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable prop_h missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("prop_h");
        pos__ = 0U;
        validate_non_negative_index("prop_h", "get_base1(ct_in_nodes, 9, \"ct_in_nodes\", 1)", get_base1(ct_in_nodes, 9, "ct_in_nodes", 1));
        validate_non_negative_index("prop_h", "Q", Q);
        context__.validate_dims("parameter initialization", "prop_h", "vector_d", context__.to_vec(Q,get_base1(ct_in_nodes, 9, "ct_in_nodes", 1)));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > prop_h(Q, Eigen::Matrix<double, Eigen::Dynamic, 1>(get_base1(ct_in_nodes, 9, "ct_in_nodes", 1)));
        size_t prop_h_j_1_max__ = get_base1(ct_in_nodes, 9, "ct_in_nodes", 1);
        size_t prop_h_k_0_max__ = Q;
        for (size_t j_1__ = 0; j_1__ < prop_h_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < prop_h_k_0_max__; ++k_0__) {
                prop_h[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t prop_h_i_0_max__ = Q;
        for (size_t i_0__ = 0; i_0__ < prop_h_i_0_max__; ++i_0__) {
            try {
                writer__.simplex_unconstrain(prop_h[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable prop_h: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }

        current_statement_begin__ = 246;
        if (!(context__.contains_r("prop_i")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable prop_i missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("prop_i");
        pos__ = 0U;
        validate_non_negative_index("prop_i", "get_base1(ct_in_nodes, 10, \"ct_in_nodes\", 1)", get_base1(ct_in_nodes, 10, "ct_in_nodes", 1));
        validate_non_negative_index("prop_i", "Q", Q);
        context__.validate_dims("parameter initialization", "prop_i", "vector_d", context__.to_vec(Q,get_base1(ct_in_nodes, 10, "ct_in_nodes", 1)));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > prop_i(Q, Eigen::Matrix<double, Eigen::Dynamic, 1>(get_base1(ct_in_nodes, 10, "ct_in_nodes", 1)));
        size_t prop_i_j_1_max__ = get_base1(ct_in_nodes, 10, "ct_in_nodes", 1);
        size_t prop_i_k_0_max__ = Q;
        for (size_t j_1__ = 0; j_1__ < prop_i_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < prop_i_k_0_max__; ++k_0__) {
                prop_i[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t prop_i_i_0_max__ = Q;
        for (size_t i_0__ = 0; i_0__ < prop_i_i_0_max__; ++i_0__) {
            try {
                writer__.simplex_unconstrain(prop_i[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable prop_i: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);

            // model parameters
            current_statement_begin__ = 220;
            local_scalar_t__ lambda_mu;
            (void) lambda_mu;  // dummy to suppress unused var warning
            if (jacobian__)
                lambda_mu = in__.scalar_offset_multiplier_constrain(get_base1(lambda_mu_prior, 1, "lambda_mu_prior", 1), get_base1(lambda_mu_prior, 2, "lambda_mu_prior", 1), lp__);
            else
                lambda_mu = in__.scalar_offset_multiplier_constrain(get_base1(lambda_mu_prior, 1, "lambda_mu_prior", 1), get_base1(lambda_mu_prior, 2, "lambda_mu_prior", 1));

            current_statement_begin__ = 221;
            local_scalar_t__ lambda_sigma;
            (void) lambda_sigma;  // dummy to suppress unused var warning
            if (jacobian__)
                lambda_sigma = in__.scalar_offset_multiplier_constrain(get_base1(lambda_sigma_prior, 1, "lambda_sigma_prior", 1), get_base1(lambda_sigma_prior, 2, "lambda_sigma_prior", 1), lp__);
            else
                lambda_sigma = in__.scalar_offset_multiplier_constrain(get_base1(lambda_sigma_prior, 1, "lambda_sigma_prior", 1), get_base1(lambda_sigma_prior, 2, "lambda_sigma_prior", 1));

            current_statement_begin__ = 222;
            local_scalar_t__ lambda_skew;
            (void) lambda_skew;  // dummy to suppress unused var warning
            if (jacobian__)
                lambda_skew = in__.scalar_offset_multiplier_constrain(get_base1(lambda_skew_prior, 1, "lambda_skew_prior", 1), get_base1(lambda_skew_prior, 2, "lambda_skew_prior", 1), lp__);
            else
                lambda_skew = in__.scalar_offset_multiplier_constrain(get_base1(lambda_skew_prior, 1, "lambda_skew_prior", 1), get_base1(lambda_skew_prior, 2, "lambda_skew_prior", 1));

            current_statement_begin__ = 224;
            local_scalar_t__ sigma_intercept_dec;
            (void) sigma_intercept_dec;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_intercept_dec = in__.scalar_constrain(lp__);
            else
                sigma_intercept_dec = in__.scalar_constrain();

            current_statement_begin__ = 228;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> lambda_log;
            (void) lambda_log;  // dummy to suppress unused var warning
            if (jacobian__)
                lambda_log = in__.vector_constrain(G, lp__);
            else
                lambda_log = in__.vector_constrain(G);

            current_statement_begin__ = 229;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sigma_inv_log;
            (void) sigma_inv_log;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_inv_log = in__.vector_constrain(G, lp__);
            else
                sigma_inv_log = in__.vector_constrain(G);

            current_statement_begin__ = 230;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> exposure_rate;
            (void) exposure_rate;  // dummy to suppress unused var warning
            if (jacobian__)
                exposure_rate = in__.vector_constrain(S, lp__);
            else
                exposure_rate = in__.vector_constrain(S);

            current_statement_begin__ = 233;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > prop_1;
            size_t prop_1_d_0_max__ = Q;
            prop_1.reserve(prop_1_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < prop_1_d_0_max__; ++d_0__) {
                if (jacobian__)
                    prop_1.push_back(in__.simplex_constrain(get_base1(ct_in_nodes, 1, "ct_in_nodes", 1), lp__));
                else
                    prop_1.push_back(in__.simplex_constrain(get_base1(ct_in_nodes, 1, "ct_in_nodes", 1)));
            }

            current_statement_begin__ = 234;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > prop_a;
            size_t prop_a_d_0_max__ = Q;
            prop_a.reserve(prop_a_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < prop_a_d_0_max__; ++d_0__) {
                if (jacobian__)
                    prop_a.push_back(in__.simplex_constrain(get_base1(ct_in_nodes, 2, "ct_in_nodes", 1), lp__));
                else
                    prop_a.push_back(in__.simplex_constrain(get_base1(ct_in_nodes, 2, "ct_in_nodes", 1)));
            }

            current_statement_begin__ = 237;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > prop_b;
            size_t prop_b_d_0_max__ = Q;
            prop_b.reserve(prop_b_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < prop_b_d_0_max__; ++d_0__) {
                if (jacobian__)
                    prop_b.push_back(in__.simplex_constrain(get_base1(ct_in_nodes, 3, "ct_in_nodes", 1), lp__));
                else
                    prop_b.push_back(in__.simplex_constrain(get_base1(ct_in_nodes, 3, "ct_in_nodes", 1)));
            }

            current_statement_begin__ = 238;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > prop_c;
            size_t prop_c_d_0_max__ = Q;
            prop_c.reserve(prop_c_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < prop_c_d_0_max__; ++d_0__) {
                if (jacobian__)
                    prop_c.push_back(in__.simplex_constrain(get_base1(ct_in_nodes, 4, "ct_in_nodes", 1), lp__));
                else
                    prop_c.push_back(in__.simplex_constrain(get_base1(ct_in_nodes, 4, "ct_in_nodes", 1)));
            }

            current_statement_begin__ = 239;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > prop_d;
            size_t prop_d_d_0_max__ = Q;
            prop_d.reserve(prop_d_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < prop_d_d_0_max__; ++d_0__) {
                if (jacobian__)
                    prop_d.push_back(in__.simplex_constrain(get_base1(ct_in_nodes, 5, "ct_in_nodes", 1), lp__));
                else
                    prop_d.push_back(in__.simplex_constrain(get_base1(ct_in_nodes, 5, "ct_in_nodes", 1)));
            }

            current_statement_begin__ = 240;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > prop_e;
            size_t prop_e_d_0_max__ = Q;
            prop_e.reserve(prop_e_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < prop_e_d_0_max__; ++d_0__) {
                if (jacobian__)
                    prop_e.push_back(in__.simplex_constrain(get_base1(ct_in_nodes, 6, "ct_in_nodes", 1), lp__));
                else
                    prop_e.push_back(in__.simplex_constrain(get_base1(ct_in_nodes, 6, "ct_in_nodes", 1)));
            }

            current_statement_begin__ = 243;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > prop_f;
            size_t prop_f_d_0_max__ = Q;
            prop_f.reserve(prop_f_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < prop_f_d_0_max__; ++d_0__) {
                if (jacobian__)
                    prop_f.push_back(in__.simplex_constrain(get_base1(ct_in_nodes, 7, "ct_in_nodes", 1), lp__));
                else
                    prop_f.push_back(in__.simplex_constrain(get_base1(ct_in_nodes, 7, "ct_in_nodes", 1)));
            }

            current_statement_begin__ = 244;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > prop_g;
            size_t prop_g_d_0_max__ = Q;
            prop_g.reserve(prop_g_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < prop_g_d_0_max__; ++d_0__) {
                if (jacobian__)
                    prop_g.push_back(in__.simplex_constrain(get_base1(ct_in_nodes, 8, "ct_in_nodes", 1), lp__));
                else
                    prop_g.push_back(in__.simplex_constrain(get_base1(ct_in_nodes, 8, "ct_in_nodes", 1)));
            }

            current_statement_begin__ = 245;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > prop_h;
            size_t prop_h_d_0_max__ = Q;
            prop_h.reserve(prop_h_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < prop_h_d_0_max__; ++d_0__) {
                if (jacobian__)
                    prop_h.push_back(in__.simplex_constrain(get_base1(ct_in_nodes, 9, "ct_in_nodes", 1), lp__));
                else
                    prop_h.push_back(in__.simplex_constrain(get_base1(ct_in_nodes, 9, "ct_in_nodes", 1)));
            }

            current_statement_begin__ = 246;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > prop_i;
            size_t prop_i_d_0_max__ = Q;
            prop_i.reserve(prop_i_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < prop_i_d_0_max__; ++d_0__) {
                if (jacobian__)
                    prop_i.push_back(in__.simplex_constrain(get_base1(ct_in_nodes, 10, "ct_in_nodes", 1), lp__));
                else
                    prop_i.push_back(in__.simplex_constrain(get_base1(ct_in_nodes, 10, "ct_in_nodes", 1)));
            }

            // transformed parameters
            current_statement_begin__ = 255;
            validate_non_negative_index("prop_2", "get_base1(ct_in_levels, 2, \"ct_in_levels\", 1)", get_base1(ct_in_levels, 2, "ct_in_levels", 1));
            validate_non_negative_index("prop_2", "Q", Q);
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > prop_2(Q, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>(get_base1(ct_in_levels, 2, "ct_in_levels", 1)));
            stan::math::initialize(prop_2, DUMMY_VAR__);
            stan::math::fill(prop_2, DUMMY_VAR__);
            stan::math::assign(prop_2,append_vector_array(stan::model::rvalue(prop_1, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_multi(singles_lv2), stan::model::nil_index_list())), "prop_1"), multiply_by_column(prop_a, stan::model::rvalue(prop_1, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(get_base1(parents_lv2, 1, "parents_lv2", 1)), stan::model::nil_index_list())), "prop_1"), pstream__), pstream__));

            current_statement_begin__ = 262;
            validate_non_negative_index("prop_3", "get_base1(ct_in_levels, 3, \"ct_in_levels\", 1)", get_base1(ct_in_levels, 3, "ct_in_levels", 1));
            validate_non_negative_index("prop_3", "Q", Q);
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > prop_3(Q, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>(get_base1(ct_in_levels, 3, "ct_in_levels", 1)));
            stan::math::initialize(prop_3, DUMMY_VAR__);
            stan::math::fill(prop_3, DUMMY_VAR__);
            stan::math::assign(prop_3,append_vector_array(stan::model::rvalue(prop_2, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_multi(singles_lv3), stan::model::nil_index_list())), "prop_2"), append_vector_array(multiply_by_column(prop_b, stan::model::rvalue(prop_2, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(get_base1(parents_lv3, 1, "parents_lv3", 1)), stan::model::nil_index_list())), "prop_2"), pstream__), append_vector_array(multiply_by_column(prop_c, stan::model::rvalue(prop_2, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(get_base1(parents_lv3, 2, "parents_lv3", 1)), stan::model::nil_index_list())), "prop_2"), pstream__), append_vector_array(multiply_by_column(prop_d, stan::model::rvalue(prop_2, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(get_base1(parents_lv3, 3, "parents_lv3", 1)), stan::model::nil_index_list())), "prop_2"), pstream__), multiply_by_column(prop_e, stan::model::rvalue(prop_2, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(get_base1(parents_lv3, 4, "parents_lv3", 1)), stan::model::nil_index_list())), "prop_2"), pstream__), pstream__), pstream__), pstream__), pstream__));

            current_statement_begin__ = 278;
            validate_non_negative_index("prop_4", "get_base1(ct_in_levels, 4, \"ct_in_levels\", 1)", get_base1(ct_in_levels, 4, "ct_in_levels", 1));
            validate_non_negative_index("prop_4", "Q", Q);
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > prop_4(Q, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>(get_base1(ct_in_levels, 4, "ct_in_levels", 1)));
            stan::math::initialize(prop_4, DUMMY_VAR__);
            stan::math::fill(prop_4, DUMMY_VAR__);
            stan::math::assign(prop_4,append_vector_array(stan::model::rvalue(prop_3, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_multi(singles_lv4), stan::model::nil_index_list())), "prop_3"), append_vector_array(multiply_by_column(prop_f, stan::model::rvalue(prop_3, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(get_base1(parents_lv4, 1, "parents_lv4", 1)), stan::model::nil_index_list())), "prop_3"), pstream__), append_vector_array(multiply_by_column(prop_g, stan::model::rvalue(prop_3, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(get_base1(parents_lv4, 2, "parents_lv4", 1)), stan::model::nil_index_list())), "prop_3"), pstream__), append_vector_array(multiply_by_column(prop_h, stan::model::rvalue(prop_3, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(get_base1(parents_lv4, 3, "parents_lv4", 1)), stan::model::nil_index_list())), "prop_3"), pstream__), multiply_by_column(prop_i, stan::model::rvalue(prop_3, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(get_base1(parents_lv4, 4, "parents_lv4", 1)), stan::model::nil_index_list())), "prop_3"), pstream__), pstream__), pstream__), pstream__), pstream__));

            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            current_statement_begin__ = 255;
            size_t prop_2_k_0_max__ = Q;
            size_t prop_2_j_1_max__ = get_base1(ct_in_levels, 2, "ct_in_levels", 1);
            for (size_t k_0__ = 0; k_0__ < prop_2_k_0_max__; ++k_0__) {
                for (size_t j_1__ = 0; j_1__ < prop_2_j_1_max__; ++j_1__) {
                    if (stan::math::is_uninitialized(prop_2[k_0__](j_1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: prop_2" << "[" << k_0__ << "]" << "(" << j_1__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable prop_2: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 262;
            size_t prop_3_k_0_max__ = Q;
            size_t prop_3_j_1_max__ = get_base1(ct_in_levels, 3, "ct_in_levels", 1);
            for (size_t k_0__ = 0; k_0__ < prop_3_k_0_max__; ++k_0__) {
                for (size_t j_1__ = 0; j_1__ < prop_3_j_1_max__; ++j_1__) {
                    if (stan::math::is_uninitialized(prop_3[k_0__](j_1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: prop_3" << "[" << k_0__ << "]" << "(" << j_1__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable prop_3: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 278;
            size_t prop_4_k_0_max__ = Q;
            size_t prop_4_j_1_max__ = get_base1(ct_in_levels, 4, "ct_in_levels", 1);
            for (size_t k_0__ = 0; k_0__ < prop_4_k_0_max__; ++k_0__) {
                for (size_t j_1__ = 0; j_1__ < prop_4_j_1_max__; ++j_1__) {
                    if (stan::math::is_uninitialized(prop_4[k_0__](j_1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: prop_4" << "[" << k_0__ << "]" << "(" << j_1__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable prop_4: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }

            // model body
            {
            current_statement_begin__ = 298;
            validate_non_negative_index("lambda_log_deconvoluted_1", "Y_1", Y_1);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> lambda_log_deconvoluted_1(Y_1);
            stan::math::initialize(lambda_log_deconvoluted_1, DUMMY_VAR__);
            stan::math::fill(lambda_log_deconvoluted_1, DUMMY_VAR__);
            stan::math::assign(lambda_log_deconvoluted_1,stan::math::log(to_vector(multiply(vector_array_to_matrix(prop_1, pstream__), stan::math::exp(to_matrix(stan::model::rvalue(lambda_log, stan::model::cons_list(stan::model::index_multi(G1_linear), stan::model::nil_index_list()), "lambda_log"), get_base1(ct_in_levels, 1, "ct_in_levels", 1), divide(G1, get_base1(ct_in_levels, 1, "ct_in_levels", 1))))))));

            current_statement_begin__ = 306;
            validate_non_negative_index("lambda_log_deconvoluted_2", "Y_2", Y_2);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> lambda_log_deconvoluted_2(Y_2);
            stan::math::initialize(lambda_log_deconvoluted_2, DUMMY_VAR__);
            stan::math::fill(lambda_log_deconvoluted_2, DUMMY_VAR__);
            stan::math::assign(lambda_log_deconvoluted_2,stan::math::log(to_vector(multiply(vector_array_to_matrix(prop_2, pstream__), stan::math::exp(to_matrix(stan::model::rvalue(lambda_log, stan::model::cons_list(stan::model::index_multi(G2_linear), stan::model::nil_index_list()), "lambda_log"), get_base1(ct_in_levels, 2, "ct_in_levels", 1), divide(G2, get_base1(ct_in_levels, 2, "ct_in_levels", 1))))))));

            current_statement_begin__ = 314;
            validate_non_negative_index("lambda_log_deconvoluted_3", "Y_3", Y_3);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> lambda_log_deconvoluted_3(Y_3);
            stan::math::initialize(lambda_log_deconvoluted_3, DUMMY_VAR__);
            stan::math::fill(lambda_log_deconvoluted_3, DUMMY_VAR__);
            stan::math::assign(lambda_log_deconvoluted_3,stan::math::log(to_vector(multiply(vector_array_to_matrix(prop_3, pstream__), stan::math::exp(to_matrix(stan::model::rvalue(lambda_log, stan::model::cons_list(stan::model::index_multi(G3_linear), stan::model::nil_index_list()), "lambda_log"), get_base1(ct_in_levels, 3, "ct_in_levels", 1), divide(G3, get_base1(ct_in_levels, 3, "ct_in_levels", 1))))))));

            current_statement_begin__ = 322;
            validate_non_negative_index("lambda_log_deconvoluted_4", "Y_4", Y_4);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> lambda_log_deconvoluted_4(Y_4);
            stan::math::initialize(lambda_log_deconvoluted_4, DUMMY_VAR__);
            stan::math::fill(lambda_log_deconvoluted_4, DUMMY_VAR__);
            stan::math::assign(lambda_log_deconvoluted_4,stan::math::log(to_vector(multiply(vector_array_to_matrix(prop_4, pstream__), stan::math::exp(to_matrix(stan::model::rvalue(lambda_log, stan::model::cons_list(stan::model::index_multi(G4_linear), stan::model::nil_index_list()), "lambda_log"), get_base1(ct_in_levels, 4, "ct_in_levels", 1), divide(G4, get_base1(ct_in_levels, 4, "ct_in_levels", 1))))))));

            current_statement_begin__ = 330;
            validate_non_negative_index("lambda_log_deconvoluted", "(((Y_1 + Y_2) + Y_3) + Y_4)", (((Y_1 + Y_2) + Y_3) + Y_4));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> lambda_log_deconvoluted((((Y_1 + Y_2) + Y_3) + Y_4));
            stan::math::initialize(lambda_log_deconvoluted, DUMMY_VAR__);
            stan::math::fill(lambda_log_deconvoluted, DUMMY_VAR__);
            stan::math::assign(lambda_log_deconvoluted,append_row(append_row(append_row(add(lambda_log_deconvoluted_1, stan::model::rvalue(exposure_rate, stan::model::cons_list(stan::model::index_multi(y_linear_S_1), stan::model::nil_index_list()), "exposure_rate")), add(lambda_log_deconvoluted_2, stan::model::rvalue(exposure_rate, stan::model::cons_list(stan::model::index_multi(y_linear_S_2), stan::model::nil_index_list()), "exposure_rate"))), add(lambda_log_deconvoluted_3, stan::model::rvalue(exposure_rate, stan::model::cons_list(stan::model::index_multi(y_linear_S_3), stan::model::nil_index_list()), "exposure_rate"))), add(lambda_log_deconvoluted_4, stan::model::rvalue(exposure_rate, stan::model::cons_list(stan::model::index_multi(y_linear_S_4), stan::model::nil_index_list()), "exposure_rate"))));


            current_statement_begin__ = 343;
            lp_accum__.add(normal_log<propto__>(lambda_mu, get_base1(lambda_mu_prior, 1, "lambda_mu_prior", 1), get_base1(lambda_mu_prior, 2, "lambda_mu_prior", 1)));
            current_statement_begin__ = 344;
            lp_accum__.add(normal_log<propto__>(lambda_sigma, get_base1(lambda_sigma_prior, 1, "lambda_sigma_prior", 1), get_base1(lambda_sigma_prior, 2, "lambda_sigma_prior", 1)));
            current_statement_begin__ = 345;
            lp_accum__.add(normal_log<propto__>(lambda_skew, get_base1(lambda_skew_prior, 1, "lambda_skew_prior", 1), get_base1(lambda_skew_prior, 2, "lambda_skew_prior", 1)));
            current_statement_begin__ = 350;
            lp_accum__.add(normal_log<propto__>(exposure_rate, 0, 1));
            current_statement_begin__ = 351;
            lp_accum__.add(normal_log<propto__>(sum(exposure_rate), 0, (0.001 * S)));
            current_statement_begin__ = 354;
            lp_accum__.add(skew_normal_log<propto__>(lambda_log, lambda_mu, stan::math::exp(lambda_sigma), lambda_skew));
            current_statement_begin__ = 355;
            lp_accum__.add(normal_log<propto__>(sigma_inv_log, add(multiply(sigma_slope, lambda_log), sigma_intercept), sigma_sigma));
            current_statement_begin__ = 358;
            for (int q = 1; q <= Q; ++q) {
                current_statement_begin__ = 358;
                lp_accum__.add(dirichlet_log<propto__>(get_base1(prop_1, q, "prop_1", 1), rep_vector(num_elements(get_base1(prop_1, 1, "prop_1", 1)), num_elements(get_base1(prop_1, 1, "prop_1", 1)))));
            }
            current_statement_begin__ = 359;
            for (int q = 1; q <= Q; ++q) {
                current_statement_begin__ = 359;
                lp_accum__.add(dirichlet_log<propto__>(get_base1(prop_a, q, "prop_a", 1), rep_vector(num_elements(get_base1(prop_a, 1, "prop_a", 1)), num_elements(get_base1(prop_a, 1, "prop_a", 1)))));
            }
            current_statement_begin__ = 360;
            for (int q = 1; q <= Q; ++q) {
                current_statement_begin__ = 360;
                lp_accum__.add(dirichlet_log<propto__>(get_base1(prop_b, q, "prop_b", 1), rep_vector(num_elements(get_base1(prop_b, 1, "prop_b", 1)), num_elements(get_base1(prop_b, 1, "prop_b", 1)))));
            }
            current_statement_begin__ = 361;
            for (int q = 1; q <= Q; ++q) {
                current_statement_begin__ = 361;
                lp_accum__.add(dirichlet_log<propto__>(get_base1(prop_c, q, "prop_c", 1), rep_vector(num_elements(get_base1(prop_c, 1, "prop_c", 1)), num_elements(get_base1(prop_c, 1, "prop_c", 1)))));
            }
            current_statement_begin__ = 362;
            for (int q = 1; q <= Q; ++q) {
                current_statement_begin__ = 362;
                lp_accum__.add(dirichlet_log<propto__>(get_base1(prop_d, q, "prop_d", 1), rep_vector(num_elements(get_base1(prop_d, 1, "prop_d", 1)), num_elements(get_base1(prop_d, 1, "prop_d", 1)))));
            }
            current_statement_begin__ = 363;
            for (int q = 1; q <= Q; ++q) {
                current_statement_begin__ = 363;
                lp_accum__.add(dirichlet_log<propto__>(get_base1(prop_e, q, "prop_e", 1), rep_vector(num_elements(get_base1(prop_e, 1, "prop_e", 1)), num_elements(get_base1(prop_e, 1, "prop_e", 1)))));
            }
            current_statement_begin__ = 364;
            for (int q = 1; q <= Q; ++q) {
                current_statement_begin__ = 364;
                lp_accum__.add(dirichlet_log<propto__>(get_base1(prop_f, q, "prop_f", 1), rep_vector(num_elements(get_base1(prop_f, 1, "prop_f", 1)), num_elements(get_base1(prop_f, 1, "prop_f", 1)))));
            }
            current_statement_begin__ = 365;
            for (int q = 1; q <= Q; ++q) {
                current_statement_begin__ = 365;
                lp_accum__.add(dirichlet_log<propto__>(get_base1(prop_g, q, "prop_g", 1), rep_vector(num_elements(get_base1(prop_g, 1, "prop_g", 1)), num_elements(get_base1(prop_g, 1, "prop_g", 1)))));
            }
            current_statement_begin__ = 366;
            for (int q = 1; q <= Q; ++q) {
                current_statement_begin__ = 366;
                lp_accum__.add(dirichlet_log<propto__>(get_base1(prop_h, q, "prop_h", 1), rep_vector(num_elements(get_base1(prop_h, 1, "prop_h", 1)), num_elements(get_base1(prop_h, 1, "prop_h", 1)))));
            }
            current_statement_begin__ = 367;
            for (int q = 1; q <= Q; ++q) {
                current_statement_begin__ = 367;
                lp_accum__.add(dirichlet_log<propto__>(get_base1(prop_i, q, "prop_i", 1), rep_vector(num_elements(get_base1(prop_i, 1, "prop_i", 1)), num_elements(get_base1(prop_i, 1, "prop_i", 1)))));
            }
            current_statement_begin__ = 370;
            lp_accum__.add(student_t_log<propto__>(sigma_intercept_dec, 3, 0, 2));
            current_statement_begin__ = 373;
            lp_accum__.add(neg_binomial_2_log_log<propto__>(y_linear, lambda_log_deconvoluted, elt_divide(1.0, stan::math::exp(add(multiply(sigma_slope, lambda_log_deconvoluted), sigma_intercept_dec)))));
            current_statement_begin__ = 379;
            lp_accum__.add(neg_binomial_2_log_log<propto__>(counts_linear, add(stan::model::rvalue(lambda_log, stan::model::cons_list(stan::model::index_multi(G_linear), stan::model::nil_index_list()), "lambda_log"), stan::model::rvalue(exposure_rate, stan::model::cons_list(stan::model::index_multi(S_linear), stan::model::nil_index_list()), "exposure_rate")), elt_divide(1.0, stan::math::exp(stan::model::rvalue(sigma_inv_log, stan::model::cons_list(stan::model::index_multi(G_linear), stan::model::nil_index_list()), "sigma_inv_log")))));
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("lambda_mu");
        names__.push_back("lambda_sigma");
        names__.push_back("lambda_skew");
        names__.push_back("sigma_intercept_dec");
        names__.push_back("lambda_log");
        names__.push_back("sigma_inv_log");
        names__.push_back("exposure_rate");
        names__.push_back("prop_1");
        names__.push_back("prop_a");
        names__.push_back("prop_b");
        names__.push_back("prop_c");
        names__.push_back("prop_d");
        names__.push_back("prop_e");
        names__.push_back("prop_f");
        names__.push_back("prop_g");
        names__.push_back("prop_h");
        names__.push_back("prop_i");
        names__.push_back("prop_2");
        names__.push_back("prop_3");
        names__.push_back("prop_4");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(G);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(G);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(S);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Q);
        dims__.push_back(get_base1(ct_in_nodes, 1, "ct_in_nodes", 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Q);
        dims__.push_back(get_base1(ct_in_nodes, 2, "ct_in_nodes", 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Q);
        dims__.push_back(get_base1(ct_in_nodes, 3, "ct_in_nodes", 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Q);
        dims__.push_back(get_base1(ct_in_nodes, 4, "ct_in_nodes", 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Q);
        dims__.push_back(get_base1(ct_in_nodes, 5, "ct_in_nodes", 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Q);
        dims__.push_back(get_base1(ct_in_nodes, 6, "ct_in_nodes", 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Q);
        dims__.push_back(get_base1(ct_in_nodes, 7, "ct_in_nodes", 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Q);
        dims__.push_back(get_base1(ct_in_nodes, 8, "ct_in_nodes", 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Q);
        dims__.push_back(get_base1(ct_in_nodes, 9, "ct_in_nodes", 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Q);
        dims__.push_back(get_base1(ct_in_nodes, 10, "ct_in_nodes", 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Q);
        dims__.push_back(get_base1(ct_in_levels, 2, "ct_in_levels", 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Q);
        dims__.push_back(get_base1(ct_in_levels, 3, "ct_in_levels", 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Q);
        dims__.push_back(get_base1(ct_in_levels, 4, "ct_in_levels", 1));
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_ARMET_tc_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning

        // read-transform, write parameters
        double lambda_mu = in__.scalar_offset_multiplier_constrain(get_base1(lambda_mu_prior, 1, "lambda_mu_prior", 1), get_base1(lambda_mu_prior, 2, "lambda_mu_prior", 1));
        vars__.push_back(lambda_mu);

        double lambda_sigma = in__.scalar_offset_multiplier_constrain(get_base1(lambda_sigma_prior, 1, "lambda_sigma_prior", 1), get_base1(lambda_sigma_prior, 2, "lambda_sigma_prior", 1));
        vars__.push_back(lambda_sigma);

        double lambda_skew = in__.scalar_offset_multiplier_constrain(get_base1(lambda_skew_prior, 1, "lambda_skew_prior", 1), get_base1(lambda_skew_prior, 2, "lambda_skew_prior", 1));
        vars__.push_back(lambda_skew);

        double sigma_intercept_dec = in__.scalar_constrain();
        vars__.push_back(sigma_intercept_dec);

        Eigen::Matrix<double, Eigen::Dynamic, 1> lambda_log = in__.vector_constrain(G);
        size_t lambda_log_j_1_max__ = G;
        for (size_t j_1__ = 0; j_1__ < lambda_log_j_1_max__; ++j_1__) {
            vars__.push_back(lambda_log(j_1__));
        }

        Eigen::Matrix<double, Eigen::Dynamic, 1> sigma_inv_log = in__.vector_constrain(G);
        size_t sigma_inv_log_j_1_max__ = G;
        for (size_t j_1__ = 0; j_1__ < sigma_inv_log_j_1_max__; ++j_1__) {
            vars__.push_back(sigma_inv_log(j_1__));
        }

        Eigen::Matrix<double, Eigen::Dynamic, 1> exposure_rate = in__.vector_constrain(S);
        size_t exposure_rate_j_1_max__ = S;
        for (size_t j_1__ = 0; j_1__ < exposure_rate_j_1_max__; ++j_1__) {
            vars__.push_back(exposure_rate(j_1__));
        }

        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > prop_1;
        size_t prop_1_d_0_max__ = Q;
        prop_1.reserve(prop_1_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < prop_1_d_0_max__; ++d_0__) {
            prop_1.push_back(in__.simplex_constrain(get_base1(ct_in_nodes, 1, "ct_in_nodes", 1)));
        }
        size_t prop_1_j_1_max__ = get_base1(ct_in_nodes, 1, "ct_in_nodes", 1);
        size_t prop_1_k_0_max__ = Q;
        for (size_t j_1__ = 0; j_1__ < prop_1_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < prop_1_k_0_max__; ++k_0__) {
                vars__.push_back(prop_1[k_0__](j_1__));
            }
        }

        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > prop_a;
        size_t prop_a_d_0_max__ = Q;
        prop_a.reserve(prop_a_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < prop_a_d_0_max__; ++d_0__) {
            prop_a.push_back(in__.simplex_constrain(get_base1(ct_in_nodes, 2, "ct_in_nodes", 1)));
        }
        size_t prop_a_j_1_max__ = get_base1(ct_in_nodes, 2, "ct_in_nodes", 1);
        size_t prop_a_k_0_max__ = Q;
        for (size_t j_1__ = 0; j_1__ < prop_a_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < prop_a_k_0_max__; ++k_0__) {
                vars__.push_back(prop_a[k_0__](j_1__));
            }
        }

        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > prop_b;
        size_t prop_b_d_0_max__ = Q;
        prop_b.reserve(prop_b_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < prop_b_d_0_max__; ++d_0__) {
            prop_b.push_back(in__.simplex_constrain(get_base1(ct_in_nodes, 3, "ct_in_nodes", 1)));
        }
        size_t prop_b_j_1_max__ = get_base1(ct_in_nodes, 3, "ct_in_nodes", 1);
        size_t prop_b_k_0_max__ = Q;
        for (size_t j_1__ = 0; j_1__ < prop_b_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < prop_b_k_0_max__; ++k_0__) {
                vars__.push_back(prop_b[k_0__](j_1__));
            }
        }

        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > prop_c;
        size_t prop_c_d_0_max__ = Q;
        prop_c.reserve(prop_c_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < prop_c_d_0_max__; ++d_0__) {
            prop_c.push_back(in__.simplex_constrain(get_base1(ct_in_nodes, 4, "ct_in_nodes", 1)));
        }
        size_t prop_c_j_1_max__ = get_base1(ct_in_nodes, 4, "ct_in_nodes", 1);
        size_t prop_c_k_0_max__ = Q;
        for (size_t j_1__ = 0; j_1__ < prop_c_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < prop_c_k_0_max__; ++k_0__) {
                vars__.push_back(prop_c[k_0__](j_1__));
            }
        }

        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > prop_d;
        size_t prop_d_d_0_max__ = Q;
        prop_d.reserve(prop_d_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < prop_d_d_0_max__; ++d_0__) {
            prop_d.push_back(in__.simplex_constrain(get_base1(ct_in_nodes, 5, "ct_in_nodes", 1)));
        }
        size_t prop_d_j_1_max__ = get_base1(ct_in_nodes, 5, "ct_in_nodes", 1);
        size_t prop_d_k_0_max__ = Q;
        for (size_t j_1__ = 0; j_1__ < prop_d_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < prop_d_k_0_max__; ++k_0__) {
                vars__.push_back(prop_d[k_0__](j_1__));
            }
        }

        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > prop_e;
        size_t prop_e_d_0_max__ = Q;
        prop_e.reserve(prop_e_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < prop_e_d_0_max__; ++d_0__) {
            prop_e.push_back(in__.simplex_constrain(get_base1(ct_in_nodes, 6, "ct_in_nodes", 1)));
        }
        size_t prop_e_j_1_max__ = get_base1(ct_in_nodes, 6, "ct_in_nodes", 1);
        size_t prop_e_k_0_max__ = Q;
        for (size_t j_1__ = 0; j_1__ < prop_e_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < prop_e_k_0_max__; ++k_0__) {
                vars__.push_back(prop_e[k_0__](j_1__));
            }
        }

        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > prop_f;
        size_t prop_f_d_0_max__ = Q;
        prop_f.reserve(prop_f_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < prop_f_d_0_max__; ++d_0__) {
            prop_f.push_back(in__.simplex_constrain(get_base1(ct_in_nodes, 7, "ct_in_nodes", 1)));
        }
        size_t prop_f_j_1_max__ = get_base1(ct_in_nodes, 7, "ct_in_nodes", 1);
        size_t prop_f_k_0_max__ = Q;
        for (size_t j_1__ = 0; j_1__ < prop_f_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < prop_f_k_0_max__; ++k_0__) {
                vars__.push_back(prop_f[k_0__](j_1__));
            }
        }

        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > prop_g;
        size_t prop_g_d_0_max__ = Q;
        prop_g.reserve(prop_g_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < prop_g_d_0_max__; ++d_0__) {
            prop_g.push_back(in__.simplex_constrain(get_base1(ct_in_nodes, 8, "ct_in_nodes", 1)));
        }
        size_t prop_g_j_1_max__ = get_base1(ct_in_nodes, 8, "ct_in_nodes", 1);
        size_t prop_g_k_0_max__ = Q;
        for (size_t j_1__ = 0; j_1__ < prop_g_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < prop_g_k_0_max__; ++k_0__) {
                vars__.push_back(prop_g[k_0__](j_1__));
            }
        }

        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > prop_h;
        size_t prop_h_d_0_max__ = Q;
        prop_h.reserve(prop_h_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < prop_h_d_0_max__; ++d_0__) {
            prop_h.push_back(in__.simplex_constrain(get_base1(ct_in_nodes, 9, "ct_in_nodes", 1)));
        }
        size_t prop_h_j_1_max__ = get_base1(ct_in_nodes, 9, "ct_in_nodes", 1);
        size_t prop_h_k_0_max__ = Q;
        for (size_t j_1__ = 0; j_1__ < prop_h_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < prop_h_k_0_max__; ++k_0__) {
                vars__.push_back(prop_h[k_0__](j_1__));
            }
        }

        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > prop_i;
        size_t prop_i_d_0_max__ = Q;
        prop_i.reserve(prop_i_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < prop_i_d_0_max__; ++d_0__) {
            prop_i.push_back(in__.simplex_constrain(get_base1(ct_in_nodes, 10, "ct_in_nodes", 1)));
        }
        size_t prop_i_j_1_max__ = get_base1(ct_in_nodes, 10, "ct_in_nodes", 1);
        size_t prop_i_k_0_max__ = Q;
        for (size_t j_1__ = 0; j_1__ < prop_i_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < prop_i_k_0_max__; ++k_0__) {
                vars__.push_back(prop_i[k_0__](j_1__));
            }
        }

        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        if (!include_tparams__ && !include_gqs__) return;

        try {
            // declare and define transformed parameters
            current_statement_begin__ = 255;
            validate_non_negative_index("prop_2", "get_base1(ct_in_levels, 2, \"ct_in_levels\", 1)", get_base1(ct_in_levels, 2, "ct_in_levels", 1));
            validate_non_negative_index("prop_2", "Q", Q);
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > prop_2(Q, Eigen::Matrix<double, Eigen::Dynamic, 1>(get_base1(ct_in_levels, 2, "ct_in_levels", 1)));
            stan::math::initialize(prop_2, DUMMY_VAR__);
            stan::math::fill(prop_2, DUMMY_VAR__);
            stan::math::assign(prop_2,append_vector_array(stan::model::rvalue(prop_1, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_multi(singles_lv2), stan::model::nil_index_list())), "prop_1"), multiply_by_column(prop_a, stan::model::rvalue(prop_1, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(get_base1(parents_lv2, 1, "parents_lv2", 1)), stan::model::nil_index_list())), "prop_1"), pstream__), pstream__));

            current_statement_begin__ = 262;
            validate_non_negative_index("prop_3", "get_base1(ct_in_levels, 3, \"ct_in_levels\", 1)", get_base1(ct_in_levels, 3, "ct_in_levels", 1));
            validate_non_negative_index("prop_3", "Q", Q);
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > prop_3(Q, Eigen::Matrix<double, Eigen::Dynamic, 1>(get_base1(ct_in_levels, 3, "ct_in_levels", 1)));
            stan::math::initialize(prop_3, DUMMY_VAR__);
            stan::math::fill(prop_3, DUMMY_VAR__);
            stan::math::assign(prop_3,append_vector_array(stan::model::rvalue(prop_2, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_multi(singles_lv3), stan::model::nil_index_list())), "prop_2"), append_vector_array(multiply_by_column(prop_b, stan::model::rvalue(prop_2, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(get_base1(parents_lv3, 1, "parents_lv3", 1)), stan::model::nil_index_list())), "prop_2"), pstream__), append_vector_array(multiply_by_column(prop_c, stan::model::rvalue(prop_2, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(get_base1(parents_lv3, 2, "parents_lv3", 1)), stan::model::nil_index_list())), "prop_2"), pstream__), append_vector_array(multiply_by_column(prop_d, stan::model::rvalue(prop_2, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(get_base1(parents_lv3, 3, "parents_lv3", 1)), stan::model::nil_index_list())), "prop_2"), pstream__), multiply_by_column(prop_e, stan::model::rvalue(prop_2, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(get_base1(parents_lv3, 4, "parents_lv3", 1)), stan::model::nil_index_list())), "prop_2"), pstream__), pstream__), pstream__), pstream__), pstream__));

            current_statement_begin__ = 278;
            validate_non_negative_index("prop_4", "get_base1(ct_in_levels, 4, \"ct_in_levels\", 1)", get_base1(ct_in_levels, 4, "ct_in_levels", 1));
            validate_non_negative_index("prop_4", "Q", Q);
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > prop_4(Q, Eigen::Matrix<double, Eigen::Dynamic, 1>(get_base1(ct_in_levels, 4, "ct_in_levels", 1)));
            stan::math::initialize(prop_4, DUMMY_VAR__);
            stan::math::fill(prop_4, DUMMY_VAR__);
            stan::math::assign(prop_4,append_vector_array(stan::model::rvalue(prop_3, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_multi(singles_lv4), stan::model::nil_index_list())), "prop_3"), append_vector_array(multiply_by_column(prop_f, stan::model::rvalue(prop_3, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(get_base1(parents_lv4, 1, "parents_lv4", 1)), stan::model::nil_index_list())), "prop_3"), pstream__), append_vector_array(multiply_by_column(prop_g, stan::model::rvalue(prop_3, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(get_base1(parents_lv4, 2, "parents_lv4", 1)), stan::model::nil_index_list())), "prop_3"), pstream__), append_vector_array(multiply_by_column(prop_h, stan::model::rvalue(prop_3, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(get_base1(parents_lv4, 3, "parents_lv4", 1)), stan::model::nil_index_list())), "prop_3"), pstream__), multiply_by_column(prop_i, stan::model::rvalue(prop_3, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(get_base1(parents_lv4, 4, "parents_lv4", 1)), stan::model::nil_index_list())), "prop_3"), pstream__), pstream__), pstream__), pstream__), pstream__));

            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            // write transformed parameters
            if (include_tparams__) {
                size_t prop_2_j_1_max__ = get_base1(ct_in_levels, 2, "ct_in_levels", 1);
                size_t prop_2_k_0_max__ = Q;
                for (size_t j_1__ = 0; j_1__ < prop_2_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < prop_2_k_0_max__; ++k_0__) {
                        vars__.push_back(prop_2[k_0__](j_1__));
                    }
                }
                size_t prop_3_j_1_max__ = get_base1(ct_in_levels, 3, "ct_in_levels", 1);
                size_t prop_3_k_0_max__ = Q;
                for (size_t j_1__ = 0; j_1__ < prop_3_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < prop_3_k_0_max__; ++k_0__) {
                        vars__.push_back(prop_3[k_0__](j_1__));
                    }
                }
                size_t prop_4_j_1_max__ = get_base1(ct_in_levels, 4, "ct_in_levels", 1);
                size_t prop_4_k_0_max__ = Q;
                for (size_t j_1__ = 0; j_1__ < prop_4_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < prop_4_k_0_max__; ++k_0__) {
                        vars__.push_back(prop_4[k_0__](j_1__));
                    }
                }
            }
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_ARMET_tc";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "lambda_mu";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "lambda_sigma";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "lambda_skew";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_intercept_dec";
        param_names__.push_back(param_name_stream__.str());
        size_t lambda_log_j_1_max__ = G;
        for (size_t j_1__ = 0; j_1__ < lambda_log_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lambda_log" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sigma_inv_log_j_1_max__ = G;
        for (size_t j_1__ = 0; j_1__ < sigma_inv_log_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_inv_log" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t exposure_rate_j_1_max__ = S;
        for (size_t j_1__ = 0; j_1__ < exposure_rate_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "exposure_rate" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t prop_1_j_1_max__ = get_base1(ct_in_nodes, 1, "ct_in_nodes", 1);
        size_t prop_1_k_0_max__ = Q;
        for (size_t j_1__ = 0; j_1__ < prop_1_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < prop_1_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "prop_1" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t prop_a_j_1_max__ = get_base1(ct_in_nodes, 2, "ct_in_nodes", 1);
        size_t prop_a_k_0_max__ = Q;
        for (size_t j_1__ = 0; j_1__ < prop_a_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < prop_a_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "prop_a" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t prop_b_j_1_max__ = get_base1(ct_in_nodes, 3, "ct_in_nodes", 1);
        size_t prop_b_k_0_max__ = Q;
        for (size_t j_1__ = 0; j_1__ < prop_b_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < prop_b_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "prop_b" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t prop_c_j_1_max__ = get_base1(ct_in_nodes, 4, "ct_in_nodes", 1);
        size_t prop_c_k_0_max__ = Q;
        for (size_t j_1__ = 0; j_1__ < prop_c_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < prop_c_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "prop_c" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t prop_d_j_1_max__ = get_base1(ct_in_nodes, 5, "ct_in_nodes", 1);
        size_t prop_d_k_0_max__ = Q;
        for (size_t j_1__ = 0; j_1__ < prop_d_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < prop_d_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "prop_d" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t prop_e_j_1_max__ = get_base1(ct_in_nodes, 6, "ct_in_nodes", 1);
        size_t prop_e_k_0_max__ = Q;
        for (size_t j_1__ = 0; j_1__ < prop_e_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < prop_e_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "prop_e" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t prop_f_j_1_max__ = get_base1(ct_in_nodes, 7, "ct_in_nodes", 1);
        size_t prop_f_k_0_max__ = Q;
        for (size_t j_1__ = 0; j_1__ < prop_f_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < prop_f_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "prop_f" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t prop_g_j_1_max__ = get_base1(ct_in_nodes, 8, "ct_in_nodes", 1);
        size_t prop_g_k_0_max__ = Q;
        for (size_t j_1__ = 0; j_1__ < prop_g_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < prop_g_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "prop_g" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t prop_h_j_1_max__ = get_base1(ct_in_nodes, 9, "ct_in_nodes", 1);
        size_t prop_h_k_0_max__ = Q;
        for (size_t j_1__ = 0; j_1__ < prop_h_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < prop_h_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "prop_h" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t prop_i_j_1_max__ = get_base1(ct_in_nodes, 10, "ct_in_nodes", 1);
        size_t prop_i_k_0_max__ = Q;
        for (size_t j_1__ = 0; j_1__ < prop_i_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < prop_i_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "prop_i" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            size_t prop_2_j_1_max__ = get_base1(ct_in_levels, 2, "ct_in_levels", 1);
            size_t prop_2_k_0_max__ = Q;
            for (size_t j_1__ = 0; j_1__ < prop_2_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < prop_2_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "prop_2" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t prop_3_j_1_max__ = get_base1(ct_in_levels, 3, "ct_in_levels", 1);
            size_t prop_3_k_0_max__ = Q;
            for (size_t j_1__ = 0; j_1__ < prop_3_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < prop_3_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "prop_3" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t prop_4_j_1_max__ = get_base1(ct_in_levels, 4, "ct_in_levels", 1);
            size_t prop_4_k_0_max__ = Q;
            for (size_t j_1__ = 0; j_1__ < prop_4_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < prop_4_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "prop_4" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }

        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "lambda_mu";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "lambda_sigma";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "lambda_skew";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_intercept_dec";
        param_names__.push_back(param_name_stream__.str());
        size_t lambda_log_j_1_max__ = G;
        for (size_t j_1__ = 0; j_1__ < lambda_log_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lambda_log" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sigma_inv_log_j_1_max__ = G;
        for (size_t j_1__ = 0; j_1__ < sigma_inv_log_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_inv_log" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t exposure_rate_j_1_max__ = S;
        for (size_t j_1__ = 0; j_1__ < exposure_rate_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "exposure_rate" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t prop_1_j_1_max__ = (get_base1(ct_in_nodes, 1, "ct_in_nodes", 1) - 1);
        size_t prop_1_k_0_max__ = Q;
        for (size_t j_1__ = 0; j_1__ < prop_1_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < prop_1_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "prop_1" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t prop_a_j_1_max__ = (get_base1(ct_in_nodes, 2, "ct_in_nodes", 1) - 1);
        size_t prop_a_k_0_max__ = Q;
        for (size_t j_1__ = 0; j_1__ < prop_a_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < prop_a_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "prop_a" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t prop_b_j_1_max__ = (get_base1(ct_in_nodes, 3, "ct_in_nodes", 1) - 1);
        size_t prop_b_k_0_max__ = Q;
        for (size_t j_1__ = 0; j_1__ < prop_b_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < prop_b_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "prop_b" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t prop_c_j_1_max__ = (get_base1(ct_in_nodes, 4, "ct_in_nodes", 1) - 1);
        size_t prop_c_k_0_max__ = Q;
        for (size_t j_1__ = 0; j_1__ < prop_c_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < prop_c_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "prop_c" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t prop_d_j_1_max__ = (get_base1(ct_in_nodes, 5, "ct_in_nodes", 1) - 1);
        size_t prop_d_k_0_max__ = Q;
        for (size_t j_1__ = 0; j_1__ < prop_d_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < prop_d_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "prop_d" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t prop_e_j_1_max__ = (get_base1(ct_in_nodes, 6, "ct_in_nodes", 1) - 1);
        size_t prop_e_k_0_max__ = Q;
        for (size_t j_1__ = 0; j_1__ < prop_e_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < prop_e_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "prop_e" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t prop_f_j_1_max__ = (get_base1(ct_in_nodes, 7, "ct_in_nodes", 1) - 1);
        size_t prop_f_k_0_max__ = Q;
        for (size_t j_1__ = 0; j_1__ < prop_f_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < prop_f_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "prop_f" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t prop_g_j_1_max__ = (get_base1(ct_in_nodes, 8, "ct_in_nodes", 1) - 1);
        size_t prop_g_k_0_max__ = Q;
        for (size_t j_1__ = 0; j_1__ < prop_g_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < prop_g_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "prop_g" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t prop_h_j_1_max__ = (get_base1(ct_in_nodes, 9, "ct_in_nodes", 1) - 1);
        size_t prop_h_k_0_max__ = Q;
        for (size_t j_1__ = 0; j_1__ < prop_h_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < prop_h_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "prop_h" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t prop_i_j_1_max__ = (get_base1(ct_in_nodes, 10, "ct_in_nodes", 1) - 1);
        size_t prop_i_k_0_max__ = Q;
        for (size_t j_1__ = 0; j_1__ < prop_i_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < prop_i_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "prop_i" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            size_t prop_2_j_1_max__ = get_base1(ct_in_levels, 2, "ct_in_levels", 1);
            size_t prop_2_k_0_max__ = Q;
            for (size_t j_1__ = 0; j_1__ < prop_2_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < prop_2_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "prop_2" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t prop_3_j_1_max__ = get_base1(ct_in_levels, 3, "ct_in_levels", 1);
            size_t prop_3_k_0_max__ = Q;
            for (size_t j_1__ = 0; j_1__ < prop_3_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < prop_3_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "prop_3" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t prop_4_j_1_max__ = get_base1(ct_in_levels, 4, "ct_in_levels", 1);
            size_t prop_4_k_0_max__ = Q;
            for (size_t j_1__ = 0; j_1__ < prop_4_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < prop_4_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "prop_4" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }

        if (!include_gqs__) return;
    }

}; // model

}  // namespace

typedef model_ARMET_tc_namespace::model_ARMET_tc stan_model;


#endif
