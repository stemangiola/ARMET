/*
    rstanarm is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    rstanarm is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with rstanarm.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.17.0

#include <stan/model/model_header.hpp>

namespace model_ARMET_tcFix_recursive_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_ARMET_tcFix_recursive");
    reader.add_event(120, 120, "end", "model_ARMET_tcFix_recursive");
    return reader;
}

#include <meta_header.hpp>
 class model_ARMET_tcFix_recursive : public prob_grad {
private:
    int G;
    int P;
    int S;
    int R;
    matrix_d X;
    matrix_d y;
    matrix_d x;
    vector<vector_d> p_target;
    matrix_d y_hat_background;
    vector<vector_d> theta;
    int is_mix_microarray;
    matrix_d y_log;
    double mult;
    vector_d alpha_hyper_prior;
    double bern_0;
    double bern_1;
    double skip_0_inflation;
    double how_many_0s;
public:
    model_ARMET_tcFix_recursive(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_ARMET_tcFix_recursive(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_ARMET_tcFix_recursive_namespace::model_ARMET_tcFix_recursive";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        try {
            current_statement_begin__ = 2;
            context__.validate_dims("data initialization", "G", "int", context__.to_vec());
            G = int(0);
            vals_i__ = context__.vals_i("G");
            pos__ = 0;
            G = vals_i__[pos__++];
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "P", "int", context__.to_vec());
            P = int(0);
            vals_i__ = context__.vals_i("P");
            pos__ = 0;
            P = vals_i__[pos__++];
            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "S", "int", context__.to_vec());
            S = int(0);
            vals_i__ = context__.vals_i("S");
            pos__ = 0;
            S = vals_i__[pos__++];
            current_statement_begin__ = 5;
            context__.validate_dims("data initialization", "R", "int", context__.to_vec());
            R = int(0);
            vals_i__ = context__.vals_i("R");
            pos__ = 0;
            R = vals_i__[pos__++];
            current_statement_begin__ = 6;
            validate_non_negative_index("X", "S", S);
            validate_non_negative_index("X", "R", R);
            context__.validate_dims("data initialization", "X", "matrix_d", context__.to_vec(S,R));
            validate_non_negative_index("X", "S", S);
            validate_non_negative_index("X", "R", R);
            X = matrix_d(static_cast<Eigen::VectorXd::Index>(S),static_cast<Eigen::VectorXd::Index>(R));
            vals_r__ = context__.vals_r("X");
            pos__ = 0;
            size_t X_m_mat_lim__ = S;
            size_t X_n_mat_lim__ = R;
            for (size_t n_mat__ = 0; n_mat__ < X_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < X_m_mat_lim__; ++m_mat__) {
                    X(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 7;
            validate_non_negative_index("y", "S", S);
            validate_non_negative_index("y", "G", G);
            context__.validate_dims("data initialization", "y", "matrix_d", context__.to_vec(S,G));
            validate_non_negative_index("y", "S", S);
            validate_non_negative_index("y", "G", G);
            y = matrix_d(static_cast<Eigen::VectorXd::Index>(S),static_cast<Eigen::VectorXd::Index>(G));
            vals_r__ = context__.vals_r("y");
            pos__ = 0;
            size_t y_m_mat_lim__ = S;
            size_t y_n_mat_lim__ = G;
            for (size_t n_mat__ = 0; n_mat__ < y_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < y_m_mat_lim__; ++m_mat__) {
                    y(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 8;
            validate_non_negative_index("x", "G", G);
            validate_non_negative_index("x", "P", P);
            context__.validate_dims("data initialization", "x", "matrix_d", context__.to_vec(G,P));
            validate_non_negative_index("x", "G", G);
            validate_non_negative_index("x", "P", P);
            x = matrix_d(static_cast<Eigen::VectorXd::Index>(G),static_cast<Eigen::VectorXd::Index>(P));
            vals_r__ = context__.vals_r("x");
            pos__ = 0;
            size_t x_m_mat_lim__ = G;
            size_t x_n_mat_lim__ = P;
            for (size_t n_mat__ = 0; n_mat__ < x_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < x_m_mat_lim__; ++m_mat__) {
                    x(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 9;
            validate_non_negative_index("p_target", "1", 1);
            validate_non_negative_index("p_target", "S", S);
            context__.validate_dims("data initialization", "p_target", "vector_d", context__.to_vec(1,S));
            validate_non_negative_index("p_target", "1", 1);
            validate_non_negative_index("p_target", "S", S);
            p_target = std::vector<vector_d>(1,vector_d(static_cast<Eigen::VectorXd::Index>(S)));
            vals_r__ = context__.vals_r("p_target");
            pos__ = 0;
            size_t p_target_i_vec_lim__ = S;
            for (size_t i_vec__ = 0; i_vec__ < p_target_i_vec_lim__; ++i_vec__) {
                size_t p_target_limit_0__ = 1;
                for (size_t i_0__ = 0; i_0__ < p_target_limit_0__; ++i_0__) {
                    p_target[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 10;
            validate_non_negative_index("y_hat_background", "S", S);
            validate_non_negative_index("y_hat_background", "G", G);
            context__.validate_dims("data initialization", "y_hat_background", "matrix_d", context__.to_vec(S,G));
            validate_non_negative_index("y_hat_background", "S", S);
            validate_non_negative_index("y_hat_background", "G", G);
            y_hat_background = matrix_d(static_cast<Eigen::VectorXd::Index>(S),static_cast<Eigen::VectorXd::Index>(G));
            vals_r__ = context__.vals_r("y_hat_background");
            pos__ = 0;
            size_t y_hat_background_m_mat_lim__ = S;
            size_t y_hat_background_n_mat_lim__ = G;
            for (size_t n_mat__ = 0; n_mat__ < y_hat_background_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < y_hat_background_m_mat_lim__; ++m_mat__) {
                    y_hat_background(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 12;
            validate_non_negative_index("theta", "1", 1);
            validate_non_negative_index("theta", "S", S);
            context__.validate_dims("data initialization", "theta", "vector_d", context__.to_vec(1,S));
            validate_non_negative_index("theta", "1", 1);
            validate_non_negative_index("theta", "S", S);
            theta = std::vector<vector_d>(1,vector_d(static_cast<Eigen::VectorXd::Index>(S)));
            vals_r__ = context__.vals_r("theta");
            pos__ = 0;
            size_t theta_i_vec_lim__ = S;
            for (size_t i_vec__ = 0; i_vec__ < theta_i_vec_lim__; ++i_vec__) {
                size_t theta_limit_0__ = 1;
                for (size_t i_0__ = 0; i_0__ < theta_limit_0__; ++i_0__) {
                    theta[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 13;
            context__.validate_dims("data initialization", "is_mix_microarray", "int", context__.to_vec());
            is_mix_microarray = int(0);
            vals_i__ = context__.vals_i("is_mix_microarray");
            pos__ = 0;
            is_mix_microarray = vals_i__[pos__++];

            // validate, data variables
            current_statement_begin__ = 2;
            current_statement_begin__ = 3;
            current_statement_begin__ = 4;
            current_statement_begin__ = 5;
            check_greater_or_equal(function__,"R",R,1);
            current_statement_begin__ = 6;
            current_statement_begin__ = 7;
            check_greater_or_equal(function__,"y",y,0);
            current_statement_begin__ = 8;
            check_greater_or_equal(function__,"x",x,0);
            current_statement_begin__ = 9;
            for (int k0__ = 0; k0__ < 1; ++k0__) {
                check_greater_or_equal(function__,"p_target[k0__]",p_target[k0__],0);
                check_less_or_equal(function__,"p_target[k0__]",p_target[k0__],1);
            }
            current_statement_begin__ = 10;
            current_statement_begin__ = 12;
            for (int k0__ = 0; k0__ < 1; ++k0__) {
                check_greater_or_equal(function__,"theta[k0__]",theta[k0__],0);
                check_less_or_equal(function__,"theta[k0__]",theta[k0__],1);
            }
            current_statement_begin__ = 13;
            // initialize data variables
            current_statement_begin__ = 17;
            validate_non_negative_index("y_log", "S", S);
            validate_non_negative_index("y_log", "G", G);
            y_log = matrix_d(static_cast<Eigen::VectorXd::Index>(S),static_cast<Eigen::VectorXd::Index>(G));
            stan::math::fill(y_log,DUMMY_VAR__);
            current_statement_begin__ = 18;
            mult = double(0);
            stan::math::fill(mult,DUMMY_VAR__);
            current_statement_begin__ = 19;
            validate_non_negative_index("alpha_hyper_prior", "P", P);
            alpha_hyper_prior = vector_d(static_cast<Eigen::VectorXd::Index>(P));
            stan::math::fill(alpha_hyper_prior,DUMMY_VAR__);
            current_statement_begin__ = 21;
            bern_0 = double(0);
            stan::math::fill(bern_0,DUMMY_VAR__);
            current_statement_begin__ = 22;
            bern_1 = double(0);
            stan::math::fill(bern_1,DUMMY_VAR__);
            current_statement_begin__ = 24;
            skip_0_inflation = double(0);
            stan::math::fill(skip_0_inflation,DUMMY_VAR__);
            stan::math::assign(skip_0_inflation,0);
            current_statement_begin__ = 25;
            how_many_0s = double(0);
            stan::math::fill(how_many_0s,DUMMY_VAR__);
            stan::math::assign(how_many_0s,0);

            current_statement_begin__ = 27;
            stan::math::assign(y_log, log(add(y,1)));
            current_statement_begin__ = 28;
            stan::math::assign(mult, 2);
            current_statement_begin__ = 29;
            if (as_bool(logical_lt(mult,1))) {
                current_statement_begin__ = 29;
                stan::math::assign(mult, 1);
            }
            current_statement_begin__ = 30;
            for (int p = 1; p <= P; ++p) {
                current_statement_begin__ = 30;
                stan::math::assign(get_base1_lhs(alpha_hyper_prior,p,"alpha_hyper_prior",1), 10);
            }
            current_statement_begin__ = 32;
            stan::math::assign(bern_0, bernoulli_log(0,get_base1(theta,1,"theta",1)));
            current_statement_begin__ = 33;
            stan::math::assign(bern_1, bernoulli_log(1,get_base1(theta,1,"theta",1)));
            current_statement_begin__ = 35;
            for (int s = 1; s <= S; ++s) {
                current_statement_begin__ = 35;
                for (int g = 1; g <= G; ++g) {
                    current_statement_begin__ = 35;
                    if (as_bool(logical_eq(get_base1(y,s,g,"y",1),0))) {
                        current_statement_begin__ = 35;
                        stan::math::assign(how_many_0s, (how_many_0s + 1));
                    }
                }
            }
            current_statement_begin__ = 36;
            if (as_bool(logical_lt((how_many_0s / (G * S)),0.050000000000000003))) {
                current_statement_begin__ = 36;
                stan::math::assign(skip_0_inflation, 1);
            }

            // validate transformed data
            current_statement_begin__ = 17;
            check_greater_or_equal(function__,"y_log",y_log,0);
            current_statement_begin__ = 18;
            check_greater_or_equal(function__,"mult",mult,0);
            current_statement_begin__ = 19;
            check_greater_or_equal(function__,"alpha_hyper_prior",alpha_hyper_prior,1);
            current_statement_begin__ = 21;
            current_statement_begin__ = 22;
            current_statement_begin__ = 24;
            current_statement_begin__ = 25;

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 39;
            validate_non_negative_index("beta", "P", P);
            validate_non_negative_index("beta", "S", S);
            num_params_r__ += (P - 1) * S;
            current_statement_begin__ = 40;
            validate_non_negative_index("sigma0", "S", S);
            num_params_r__ += S;
            current_statement_begin__ = 42;
            validate_non_negative_index("alpha", "P", P);
            validate_non_negative_index("alpha", "R", R);
            num_params_r__ += (P - 1) * R;
            current_statement_begin__ = 43;
            ++num_params_r__;
            current_statement_begin__ = 44;
            ++num_params_r__;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~model_ARMET_tcFix_recursive() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("beta")))
            throw std::runtime_error("variable beta missing");
        vals_r__ = context__.vals_r("beta");
        pos__ = 0U;
        validate_non_negative_index("beta", "S", S);
        validate_non_negative_index("beta", "P", P);
        context__.validate_dims("initialization", "beta", "vector_d", context__.to_vec(S,P));
        std::vector<vector_d> beta(S,vector_d(static_cast<Eigen::VectorXd::Index>(P)));
        for (int j1__ = 0U; j1__ < P; ++j1__)
            for (int i0__ = 0U; i0__ < S; ++i0__)
                beta[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < S; ++i0__)
            try {
            writer__.simplex_unconstrain(beta[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable beta: ") + e.what());
        }

        if (!(context__.contains_r("sigma0")))
            throw std::runtime_error("variable sigma0 missing");
        vals_r__ = context__.vals_r("sigma0");
        pos__ = 0U;
        validate_non_negative_index("sigma0", "S", S);
        context__.validate_dims("initialization", "sigma0", "double", context__.to_vec(S));
        std::vector<double> sigma0(S,double(0));
        for (int i0__ = 0U; i0__ < S; ++i0__)
            sigma0[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < S; ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,sigma0[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sigma0: ") + e.what());
        }

        if (!(context__.contains_r("alpha")))
            throw std::runtime_error("variable alpha missing");
        vals_r__ = context__.vals_r("alpha");
        pos__ = 0U;
        validate_non_negative_index("alpha", "R", R);
        validate_non_negative_index("alpha", "P", P);
        context__.validate_dims("initialization", "alpha", "vector_d", context__.to_vec(R,P));
        std::vector<vector_d> alpha(R,vector_d(static_cast<Eigen::VectorXd::Index>(P)));
        for (int j1__ = 0U; j1__ < P; ++j1__)
            for (int i0__ = 0U; i0__ < R; ++i0__)
                alpha[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < R; ++i0__)
            try {
            writer__.simplex_unconstrain(alpha[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable alpha: ") + e.what());
        }

        if (!(context__.contains_r("phi")))
            throw std::runtime_error("variable phi missing");
        vals_r__ = context__.vals_r("phi");
        pos__ = 0U;
        context__.validate_dims("initialization", "phi", "double", context__.to_vec());
        double phi(0);
        phi = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(1,phi);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable phi: ") + e.what());
        }

        if (!(context__.contains_r("phi_phi")))
            throw std::runtime_error("variable phi_phi missing");
        vals_r__ = context__.vals_r("phi_phi");
        pos__ = 0U;
        context__.validate_dims("initialization", "phi_phi", "double", context__.to_vec());
        double phi_phi(0);
        phi_phi = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(1,phi_phi);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable phi_phi: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        try {
            // model parameters
            stan::io::reader<T__> in__(params_r__,params_i__);

            vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > beta;
            size_t dim_beta_0__ = S;
            beta.reserve(dim_beta_0__);
            for (size_t k_0__ = 0; k_0__ < dim_beta_0__; ++k_0__) {
                if (jacobian__)
                    beta.push_back(in__.simplex_constrain(P,lp__));
                else
                    beta.push_back(in__.simplex_constrain(P));
            }

            vector<T__> sigma0;
            size_t dim_sigma0_0__ = S;
            sigma0.reserve(dim_sigma0_0__);
            for (size_t k_0__ = 0; k_0__ < dim_sigma0_0__; ++k_0__) {
                if (jacobian__)
                    sigma0.push_back(in__.scalar_lb_constrain(0,lp__));
                else
                    sigma0.push_back(in__.scalar_lb_constrain(0));
            }

            vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > alpha;
            size_t dim_alpha_0__ = R;
            alpha.reserve(dim_alpha_0__);
            for (size_t k_0__ = 0; k_0__ < dim_alpha_0__; ++k_0__) {
                if (jacobian__)
                    alpha.push_back(in__.simplex_constrain(P,lp__));
                else
                    alpha.push_back(in__.simplex_constrain(P));
            }

            T__ phi;
            (void) phi;  // dummy to suppress unused var warning
            if (jacobian__)
                phi = in__.scalar_lb_constrain(1,lp__);
            else
                phi = in__.scalar_lb_constrain(1);

            T__ phi_phi;
            (void) phi_phi;  // dummy to suppress unused var warning
            if (jacobian__)
                phi_phi = in__.scalar_lb_constrain(1,lp__);
            else
                phi_phi = in__.scalar_lb_constrain(1);


            // transformed parameters
            current_statement_begin__ = 49;
            validate_non_negative_index("beta_target", "S", S);
            validate_non_negative_index("beta_target", "P", P);
            Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  beta_target(static_cast<Eigen::VectorXd::Index>(S),static_cast<Eigen::VectorXd::Index>(P));
            (void) beta_target;  // dummy to suppress unused var warning

            stan::math::initialize(beta_target, DUMMY_VAR__);
            stan::math::fill(beta_target,DUMMY_VAR__);
            current_statement_begin__ = 50;
            validate_non_negative_index("y_hat_target", "S", S);
            validate_non_negative_index("y_hat_target", "G", G);
            Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  y_hat_target(static_cast<Eigen::VectorXd::Index>(S),static_cast<Eigen::VectorXd::Index>(G));
            (void) y_hat_target;  // dummy to suppress unused var warning

            stan::math::initialize(y_hat_target, DUMMY_VAR__);
            stan::math::fill(y_hat_target,DUMMY_VAR__);
            current_statement_begin__ = 51;
            validate_non_negative_index("y_hat", "S", S);
            validate_non_negative_index("y_hat", "G", G);
            Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  y_hat(static_cast<Eigen::VectorXd::Index>(S),static_cast<Eigen::VectorXd::Index>(G));
            (void) y_hat;  // dummy to suppress unused var warning

            stan::math::initialize(y_hat, DUMMY_VAR__);
            stan::math::fill(y_hat,DUMMY_VAR__);
            current_statement_begin__ = 52;
            validate_non_negative_index("sigma", "S", S);
            vector<T__> sigma(S);
            stan::math::initialize(sigma, DUMMY_VAR__);
            stan::math::fill(sigma,DUMMY_VAR__);
            current_statement_begin__ = 53;
            validate_non_negative_index("sigma1", "S", S);
            vector<T__> sigma1(S);
            stan::math::initialize(sigma1, DUMMY_VAR__);
            stan::math::fill(sigma1,DUMMY_VAR__);
            current_statement_begin__ = 55;
            validate_non_negative_index("alpha_mat", "R", R);
            validate_non_negative_index("alpha_mat", "P", P);
            Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  alpha_mat(static_cast<Eigen::VectorXd::Index>(R),static_cast<Eigen::VectorXd::Index>(P));
            (void) alpha_mat;  // dummy to suppress unused var warning

            stan::math::initialize(alpha_mat, DUMMY_VAR__);
            stan::math::fill(alpha_mat,DUMMY_VAR__);
            current_statement_begin__ = 56;
            validate_non_negative_index("beta_hat", "S", S);
            validate_non_negative_index("beta_hat", "P", P);
            Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  beta_hat(static_cast<Eigen::VectorXd::Index>(S),static_cast<Eigen::VectorXd::Index>(P));
            (void) beta_hat;  // dummy to suppress unused var warning

            stan::math::initialize(beta_hat, DUMMY_VAR__);
            stan::math::fill(beta_hat,DUMMY_VAR__);
            current_statement_begin__ = 57;
            validate_non_negative_index("beta_hat_hat", "P", P);
            validate_non_negative_index("beta_hat_hat", "S", S);
            vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > beta_hat_hat(S, (Eigen::Matrix<T__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>(P))));
            stan::math::initialize(beta_hat_hat, DUMMY_VAR__);
            stan::math::fill(beta_hat_hat,DUMMY_VAR__);


            current_statement_begin__ = 60;
            for (int s = 1; s <= S; ++s) {
                current_statement_begin__ = 60;
                stan::math::assign(get_base1_lhs(beta_target,s,"beta_target",1), multiply(to_row_vector(get_base1(beta,s,"beta",1)),get_base1(get_base1(p_target,1,"p_target",1),s,"p_target",2)));
            }
            current_statement_begin__ = 61;
            stan::math::assign(y_hat_target, multiply(beta_target,transpose(x)));
            current_statement_begin__ = 62;
            stan::math::assign(y_hat, add(y_hat_target,y_hat_background));
            current_statement_begin__ = 64;
            if (as_bool(logical_eq(is_mix_microarray,1))) {

                current_statement_begin__ = 66;
                for (int s = 1; s <= S; ++s) {
                    current_statement_begin__ = 66;
                    stan::math::assign(get_base1_lhs(sigma,s,"sigma",1), ((get_base1(sigma0,s,"sigma0",1) * ((1 / mult) - 1)) / max(log(add(get_base1(y_hat,s,"y_hat",1),1)))));
                }
                current_statement_begin__ = 67;
                for (int s = 1; s <= S; ++s) {
                    current_statement_begin__ = 67;
                    stan::math::assign(get_base1_lhs(sigma1,s,"sigma1",1), (get_base1(sigma0,s,"sigma0",1) + (get_base1(sigma,s,"sigma",1) * max(log(add(get_base1(y_hat,s,"y_hat",1),1))))));
                }
            } else {

                current_statement_begin__ = 70;
                for (int s = 1; s <= S; ++s) {
                    current_statement_begin__ = 70;
                    stan::math::assign(get_base1_lhs(sigma,s,"sigma",1), -(0.0001));
                }
                current_statement_begin__ = 71;
                for (int s = 1; s <= S; ++s) {
                    current_statement_begin__ = 71;
                    stan::math::assign(get_base1_lhs(sigma1,s,"sigma1",1), 0);
                }
            }
            current_statement_begin__ = 74;
            for (int r = 1; r <= R; ++r) {
                current_statement_begin__ = 74;
                stan::math::assign(get_base1_lhs(alpha_mat,r,"alpha_mat",1), logit(to_row_vector(get_base1(alpha,r,"alpha",1))));
            }
            current_statement_begin__ = 75;
            stan::math::assign(beta_hat, multiply(X,alpha_mat));
            current_statement_begin__ = 76;
            for (int s = 1; s <= S; ++s) {
                current_statement_begin__ = 76;
                stan::math::assign(get_base1_lhs(beta_hat_hat,s,"beta_hat_hat",1), add(multiply(softmax(to_vector(get_base1(beta_hat,s,"beta_hat",1))),phi),1));
            }

            // validate transformed parameters
            for (int i0__ = 0; i0__ < S; ++i0__) {
                for (int i1__ = 0; i1__ < P; ++i1__) {
                    if (stan::math::is_uninitialized(beta_target(i0__,i1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: beta_target" << '[' << i0__ << ']' << '[' << i1__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }
            for (int i0__ = 0; i0__ < S; ++i0__) {
                for (int i1__ = 0; i1__ < G; ++i1__) {
                    if (stan::math::is_uninitialized(y_hat_target(i0__,i1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: y_hat_target" << '[' << i0__ << ']' << '[' << i1__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }
            for (int i0__ = 0; i0__ < S; ++i0__) {
                for (int i1__ = 0; i1__ < G; ++i1__) {
                    if (stan::math::is_uninitialized(y_hat(i0__,i1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: y_hat" << '[' << i0__ << ']' << '[' << i1__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }
            for (int i0__ = 0; i0__ < S; ++i0__) {
                if (stan::math::is_uninitialized(sigma[i0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: sigma" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
            for (int i0__ = 0; i0__ < S; ++i0__) {
                if (stan::math::is_uninitialized(sigma1[i0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: sigma1" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
            for (int i0__ = 0; i0__ < R; ++i0__) {
                for (int i1__ = 0; i1__ < P; ++i1__) {
                    if (stan::math::is_uninitialized(alpha_mat(i0__,i1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: alpha_mat" << '[' << i0__ << ']' << '[' << i1__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }
            for (int i0__ = 0; i0__ < S; ++i0__) {
                for (int i1__ = 0; i1__ < P; ++i1__) {
                    if (stan::math::is_uninitialized(beta_hat(i0__,i1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: beta_hat" << '[' << i0__ << ']' << '[' << i1__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }
            for (int i0__ = 0; i0__ < S; ++i0__) {
                for (int i1__ = 0; i1__ < P; ++i1__) {
                    if (stan::math::is_uninitialized(beta_hat_hat[i0__](i1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: beta_hat_hat" << '[' << i0__ << ']' << '[' << i1__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }

            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 49;
            current_statement_begin__ = 50;
            current_statement_begin__ = 51;
            current_statement_begin__ = 52;
            for (int k0__ = 0; k0__ < S; ++k0__) {
                check_less_or_equal(function__,"sigma[k0__]",sigma[k0__],0);
            }
            current_statement_begin__ = 53;
            current_statement_begin__ = 55;
            current_statement_begin__ = 56;
            current_statement_begin__ = 57;

            // model body
            {
            current_statement_begin__ = 81;
            validate_non_negative_index("y_hat_log", "S", S);
            validate_non_negative_index("y_hat_log", "G", G);
            Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  y_hat_log(static_cast<Eigen::VectorXd::Index>(S),static_cast<Eigen::VectorXd::Index>(G));
            (void) y_hat_log;  // dummy to suppress unused var warning

            stan::math::initialize(y_hat_log, DUMMY_VAR__);
            stan::math::fill(y_hat_log,DUMMY_VAR__);
            current_statement_begin__ = 82;
            validate_non_negative_index("y_err", "S", S);
            validate_non_negative_index("y_err", "G", G);
            Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  y_err(static_cast<Eigen::VectorXd::Index>(S),static_cast<Eigen::VectorXd::Index>(G));
            (void) y_err;  // dummy to suppress unused var warning

            stan::math::initialize(y_err, DUMMY_VAR__);
            stan::math::fill(y_err,DUMMY_VAR__);


            current_statement_begin__ = 84;
            lp_accum__.add(normal_log<propto__>(sigma0, 0, 0.01));
            current_statement_begin__ = 85;
            lp_accum__.add(cauchy_log<propto__>(phi_phi, 1, 2));
            current_statement_begin__ = 86;
            lp_accum__.add(normal_log<propto__>(phi, 0, 5));
            current_statement_begin__ = 88;
            stan::math::assign(y_hat_log, log(add(y_hat,1)));
            current_statement_begin__ = 90;
            if (as_bool(logical_eq(is_mix_microarray,1))) {

                current_statement_begin__ = 91;
                for (int s = 1; s <= S; ++s) {
                    current_statement_begin__ = 91;
                    stan::math::assign(get_base1_lhs(y_err,s,"y_err",1), add(get_base1(sigma0,s,"sigma0",1),multiply(get_base1(y_hat_log,s,"y_hat_log",1),get_base1(sigma,s,"sigma",1))));
                }
                current_statement_begin__ = 92;
                for (int s = 1; s <= S; ++s) {
                    current_statement_begin__ = 92;
                    lp_accum__.add(normal_log<propto__>(get_base1(y_log,s,"y_log",1), get_base1(y_hat_log,s,"y_hat_log",1), get_base1(y_err,s,"y_err",1)));
                }
            } else {

                current_statement_begin__ = 95;
                for (int s = 1; s <= S; ++s) {
                    current_statement_begin__ = 95;
                    for (int g = 1; g <= G; ++g) {
                        current_statement_begin__ = 95;
                        stan::math::assign(get_base1_lhs(y_err,s,g,"y_err",1), get_base1(sigma0,s,"sigma0",1));
                    }
                }
                current_statement_begin__ = 97;
                if (as_bool(logical_eq(skip_0_inflation,0))) {
                    current_statement_begin__ = 98;
                    for (int s = 1; s <= S; ++s) {
                        current_statement_begin__ = 98;
                        for (int g = 1; g <= G; ++g) {

                            current_statement_begin__ = 99;
                            if (as_bool(logical_eq(get_base1(y_log,s,g,"y_log",1),0))) {
                                current_statement_begin__ = 100;
                                lp_accum__.add(log_sum_exp(bern_1,(bern_0 + normal_log(get_base1(y_log,s,g,"y_log",1),get_base1(y_hat_log,s,g,"y_hat_log",1),get_base1(y_err,s,g,"y_err",1)))));
                            } else {
                                current_statement_begin__ = 105;
                                lp_accum__.add((bern_0 + normal_log(get_base1(y_log,s,g,"y_log",1),get_base1(y_hat_log,s,g,"y_hat_log",1),get_base1(y_err,s,g,"y_err",1))));
                            }
                        }
                    }
                } else {
                    current_statement_begin__ = 108;
                    for (int s = 1; s <= S; ++s) {
                        current_statement_begin__ = 108;
                        lp_accum__.add(normal_lpdf<propto__>(get_base1(y_log,s,"y_log",1), get_base1(y_hat_log,s,"y_hat_log",1), get_base1(y_err,s,"y_err",1)));
                    }
                }
            }
            current_statement_begin__ = 113;
            for (int s = 1; s <= S; ++s) {
                current_statement_begin__ = 113;
                lp_accum__.add(dirichlet_log<propto__>(get_base1(beta,s,"beta",1), get_base1(beta_hat_hat,s,"beta_hat_hat",1)));
            }
            current_statement_begin__ = 114;
            for (int r = 1; r <= R; ++r) {
                current_statement_begin__ = 114;
                lp_accum__.add(dirichlet_log<propto__>(get_base1(alpha,r,"alpha",1), multiply(alpha_hyper_prior,phi_phi)));
            }
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("beta");
        names__.push_back("sigma0");
        names__.push_back("alpha");
        names__.push_back("phi");
        names__.push_back("phi_phi");
        names__.push_back("beta_target");
        names__.push_back("y_hat_target");
        names__.push_back("y_hat");
        names__.push_back("sigma");
        names__.push_back("sigma1");
        names__.push_back("alpha_mat");
        names__.push_back("beta_hat");
        names__.push_back("beta_hat_hat");
        names__.push_back("beta_gen");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(S);
        dims__.push_back(P);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(S);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(R);
        dims__.push_back(P);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(S);
        dims__.push_back(P);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(S);
        dims__.push_back(G);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(S);
        dims__.push_back(G);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(S);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(S);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(R);
        dims__.push_back(P);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(S);
        dims__.push_back(P);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(S);
        dims__.push_back(P);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(S);
        dims__.push_back(P);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "model_ARMET_tcFix_recursive_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        vector<vector_d> beta;
        size_t dim_beta_0__ = S;
        for (size_t k_0__ = 0; k_0__ < dim_beta_0__; ++k_0__) {
            beta.push_back(in__.simplex_constrain(P));
        }
        vector<double> sigma0;
        size_t dim_sigma0_0__ = S;
        for (size_t k_0__ = 0; k_0__ < dim_sigma0_0__; ++k_0__) {
            sigma0.push_back(in__.scalar_lb_constrain(0));
        }
        vector<vector_d> alpha;
        size_t dim_alpha_0__ = R;
        for (size_t k_0__ = 0; k_0__ < dim_alpha_0__; ++k_0__) {
            alpha.push_back(in__.simplex_constrain(P));
        }
        double phi = in__.scalar_lb_constrain(1);
        double phi_phi = in__.scalar_lb_constrain(1);
            for (int k_1__ = 0; k_1__ < P; ++k_1__) {
                for (int k_0__ = 0; k_0__ < S; ++k_0__) {
                vars__.push_back(beta[k_0__][k_1__]);
                }
            }
            for (int k_0__ = 0; k_0__ < S; ++k_0__) {
            vars__.push_back(sigma0[k_0__]);
            }
            for (int k_1__ = 0; k_1__ < P; ++k_1__) {
                for (int k_0__ = 0; k_0__ < R; ++k_0__) {
                vars__.push_back(alpha[k_0__][k_1__]);
                }
            }
        vars__.push_back(phi);
        vars__.push_back(phi_phi);

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            current_statement_begin__ = 49;
            validate_non_negative_index("beta_target", "S", S);
            validate_non_negative_index("beta_target", "P", P);
            matrix_d beta_target(static_cast<Eigen::VectorXd::Index>(S),static_cast<Eigen::VectorXd::Index>(P));
            (void) beta_target;  // dummy to suppress unused var warning

            stan::math::initialize(beta_target, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(beta_target,DUMMY_VAR__);
            current_statement_begin__ = 50;
            validate_non_negative_index("y_hat_target", "S", S);
            validate_non_negative_index("y_hat_target", "G", G);
            matrix_d y_hat_target(static_cast<Eigen::VectorXd::Index>(S),static_cast<Eigen::VectorXd::Index>(G));
            (void) y_hat_target;  // dummy to suppress unused var warning

            stan::math::initialize(y_hat_target, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(y_hat_target,DUMMY_VAR__);
            current_statement_begin__ = 51;
            validate_non_negative_index("y_hat", "S", S);
            validate_non_negative_index("y_hat", "G", G);
            matrix_d y_hat(static_cast<Eigen::VectorXd::Index>(S),static_cast<Eigen::VectorXd::Index>(G));
            (void) y_hat;  // dummy to suppress unused var warning

            stan::math::initialize(y_hat, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(y_hat,DUMMY_VAR__);
            current_statement_begin__ = 52;
            validate_non_negative_index("sigma", "S", S);
            vector<double> sigma(S, 0.0);
            stan::math::initialize(sigma, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(sigma,DUMMY_VAR__);
            current_statement_begin__ = 53;
            validate_non_negative_index("sigma1", "S", S);
            vector<double> sigma1(S, 0.0);
            stan::math::initialize(sigma1, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(sigma1,DUMMY_VAR__);
            current_statement_begin__ = 55;
            validate_non_negative_index("alpha_mat", "R", R);
            validate_non_negative_index("alpha_mat", "P", P);
            matrix_d alpha_mat(static_cast<Eigen::VectorXd::Index>(R),static_cast<Eigen::VectorXd::Index>(P));
            (void) alpha_mat;  // dummy to suppress unused var warning

            stan::math::initialize(alpha_mat, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(alpha_mat,DUMMY_VAR__);
            current_statement_begin__ = 56;
            validate_non_negative_index("beta_hat", "S", S);
            validate_non_negative_index("beta_hat", "P", P);
            matrix_d beta_hat(static_cast<Eigen::VectorXd::Index>(S),static_cast<Eigen::VectorXd::Index>(P));
            (void) beta_hat;  // dummy to suppress unused var warning

            stan::math::initialize(beta_hat, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(beta_hat,DUMMY_VAR__);
            current_statement_begin__ = 57;
            validate_non_negative_index("beta_hat_hat", "P", P);
            validate_non_negative_index("beta_hat_hat", "S", S);
            vector<vector_d> beta_hat_hat(S, (vector_d(static_cast<Eigen::VectorXd::Index>(P))));
            stan::math::initialize(beta_hat_hat, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(beta_hat_hat,DUMMY_VAR__);


            current_statement_begin__ = 60;
            for (int s = 1; s <= S; ++s) {
                current_statement_begin__ = 60;
                stan::math::assign(get_base1_lhs(beta_target,s,"beta_target",1), multiply(to_row_vector(get_base1(beta,s,"beta",1)),get_base1(get_base1(p_target,1,"p_target",1),s,"p_target",2)));
            }
            current_statement_begin__ = 61;
            stan::math::assign(y_hat_target, multiply(beta_target,transpose(x)));
            current_statement_begin__ = 62;
            stan::math::assign(y_hat, add(y_hat_target,y_hat_background));
            current_statement_begin__ = 64;
            if (as_bool(logical_eq(is_mix_microarray,1))) {

                current_statement_begin__ = 66;
                for (int s = 1; s <= S; ++s) {
                    current_statement_begin__ = 66;
                    stan::math::assign(get_base1_lhs(sigma,s,"sigma",1), ((get_base1(sigma0,s,"sigma0",1) * ((1 / mult) - 1)) / max(log(add(get_base1(y_hat,s,"y_hat",1),1)))));
                }
                current_statement_begin__ = 67;
                for (int s = 1; s <= S; ++s) {
                    current_statement_begin__ = 67;
                    stan::math::assign(get_base1_lhs(sigma1,s,"sigma1",1), (get_base1(sigma0,s,"sigma0",1) + (get_base1(sigma,s,"sigma",1) * max(log(add(get_base1(y_hat,s,"y_hat",1),1))))));
                }
            } else {

                current_statement_begin__ = 70;
                for (int s = 1; s <= S; ++s) {
                    current_statement_begin__ = 70;
                    stan::math::assign(get_base1_lhs(sigma,s,"sigma",1), -(0.0001));
                }
                current_statement_begin__ = 71;
                for (int s = 1; s <= S; ++s) {
                    current_statement_begin__ = 71;
                    stan::math::assign(get_base1_lhs(sigma1,s,"sigma1",1), 0);
                }
            }
            current_statement_begin__ = 74;
            for (int r = 1; r <= R; ++r) {
                current_statement_begin__ = 74;
                stan::math::assign(get_base1_lhs(alpha_mat,r,"alpha_mat",1), logit(to_row_vector(get_base1(alpha,r,"alpha",1))));
            }
            current_statement_begin__ = 75;
            stan::math::assign(beta_hat, multiply(X,alpha_mat));
            current_statement_begin__ = 76;
            for (int s = 1; s <= S; ++s) {
                current_statement_begin__ = 76;
                stan::math::assign(get_base1_lhs(beta_hat_hat,s,"beta_hat_hat",1), add(multiply(softmax(to_vector(get_base1(beta_hat,s,"beta_hat",1))),phi),1));
            }

            // validate transformed parameters
            current_statement_begin__ = 49;
            current_statement_begin__ = 50;
            current_statement_begin__ = 51;
            current_statement_begin__ = 52;
            for (int k0__ = 0; k0__ < S; ++k0__) {
                check_less_or_equal(function__,"sigma[k0__]",sigma[k0__],0);
            }
            current_statement_begin__ = 53;
            current_statement_begin__ = 55;
            current_statement_begin__ = 56;
            current_statement_begin__ = 57;

            // write transformed parameters
            for (int k_1__ = 0; k_1__ < P; ++k_1__) {
                for (int k_0__ = 0; k_0__ < S; ++k_0__) {
                vars__.push_back(beta_target(k_0__, k_1__));
                }
            }
            for (int k_1__ = 0; k_1__ < G; ++k_1__) {
                for (int k_0__ = 0; k_0__ < S; ++k_0__) {
                vars__.push_back(y_hat_target(k_0__, k_1__));
                }
            }
            for (int k_1__ = 0; k_1__ < G; ++k_1__) {
                for (int k_0__ = 0; k_0__ < S; ++k_0__) {
                vars__.push_back(y_hat(k_0__, k_1__));
                }
            }
            for (int k_0__ = 0; k_0__ < S; ++k_0__) {
            vars__.push_back(sigma[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < S; ++k_0__) {
            vars__.push_back(sigma1[k_0__]);
            }
            for (int k_1__ = 0; k_1__ < P; ++k_1__) {
                for (int k_0__ = 0; k_0__ < R; ++k_0__) {
                vars__.push_back(alpha_mat(k_0__, k_1__));
                }
            }
            for (int k_1__ = 0; k_1__ < P; ++k_1__) {
                for (int k_0__ = 0; k_0__ < S; ++k_0__) {
                vars__.push_back(beta_hat(k_0__, k_1__));
                }
            }
            for (int k_1__ = 0; k_1__ < P; ++k_1__) {
                for (int k_0__ = 0; k_0__ < S; ++k_0__) {
                vars__.push_back(beta_hat_hat[k_0__][k_1__]);
                }
            }

            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 118;
            validate_non_negative_index("beta_gen", "P", P);
            validate_non_negative_index("beta_gen", "S", S);
            vector<vector_d> beta_gen(S, (vector_d(static_cast<Eigen::VectorXd::Index>(P))));
            stan::math::initialize(beta_gen, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(beta_gen,DUMMY_VAR__);


            current_statement_begin__ = 119;
            for (int s = 1; s <= S; ++s) {
                current_statement_begin__ = 119;
                stan::math::assign(get_base1_lhs(beta_gen,s,"beta_gen",1), dirichlet_rng(get_base1(beta_hat_hat,s,"beta_hat_hat",1), base_rng__));
            }

            // validate generated quantities
            current_statement_begin__ = 118;

            // write generated quantities
            for (int k_1__ = 0; k_1__ < P; ++k_1__) {
                for (int k_0__ = 0; k_0__ < S; ++k_0__) {
                vars__.push_back(beta_gen[k_0__][k_1__]);
                }
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_ARMET_tcFix_recursive";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_1__ = 1; k_1__ <= P; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= S; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= S; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma0" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= P; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= R; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "alpha" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "phi";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "phi_phi";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_1__ = 1; k_1__ <= P; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= S; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta_target" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= G; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= S; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "y_hat_target" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= G; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= S; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "y_hat" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= S; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= S; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= P; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= R; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "alpha_mat" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= P; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= S; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta_hat" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= P; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= S; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta_hat_hat" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__) return;
        for (int k_1__ = 1; k_1__ <= P; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= S; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta_gen" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_1__ = 1; k_1__ <= (P - 1); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= S; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= S; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma0" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= (P - 1); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= R; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "alpha" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "phi";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "phi_phi";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_1__ = 1; k_1__ <= P; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= S; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta_target" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= G; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= S; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "y_hat_target" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= G; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= S; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "y_hat" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= S; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= S; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= P; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= R; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "alpha_mat" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= P; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= S; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta_hat" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= P; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= S; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta_hat_hat" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__) return;
        for (int k_1__ = 1; k_1__ <= P; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= S; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta_gen" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
    }

}; // model

}

typedef model_ARMET_tcFix_recursive_namespace::model_ARMET_tcFix_recursive stan_model;


#endif
